---
layout: post
title: "2022년 4월 TIL"
date: 2022-04-01 18:00:00 +0900
categories: 202204 TIL
---

### 4/1(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 빌더 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바 8 Stream.Builder API
-   StringBuilder
-   롬복의 @Builder
-   스프링
    -   UriComponentsBuilder
    -   MockMvcWebClientBuilder
    -   ...Builder

---

### 4/2(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 프로토타입 패턴 1부<br/>
패턴 소개

**프로토타입(Prototype factory) 패턴: 기존 인스턴스를 복제하여 새로운 인스턴스를 만드는 방법<br/>
복제 기능을 갖추고 있는 기존 인스턴스를 프로토타입으로 사용해 새 인스턴스를 만들 수 있다.**

---

### 4/3(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 프로토타입 패턴 2부<br/>
패턴 적용하기

```java
public class GithubRepository {

    private String user;
    private String name;

    public String getUser() {
        return user;
    }

    public void setUser(String user) {
        this.user = user;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
```

```java
//GithubIssue(clone 메서드를 사용하기 위해서는 Cloneable 인터페이스를 구현해야 한다.)
public class GithubIssue implements Cloneable {

    private int id;

    private String title;

    private GithubRepository repository;

    public GithubIssue(GithubRepository repository) {
        this.repository = repository;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public GithubRepository getRepository() {
        return repository;
    }

    public String getUrl() {
        return String.format("https://github.com/%s/%s/issues/%d",
                repository.getUser(),
                repository.getName(),
                this.getId());
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        GithubRepository repository = new GithubRepository();
        repository.setUser(this.repository.getUser());
        repository.setName(this.repository.getName());

        GithubIssue githubIssue = new GithubIssue(repository);
        githubIssue.setId(this.id);
        githubIssue.setTitle(this.title);

        return githubIssue;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        GithubIssue that = (GithubIssue) o;
        return id == that.id && Objects.equals(title, that.title) && Objects.equals(repository, that.repository);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, title, repository);
    }
}
```

```java
//App
public class App {
    public static void main(String[] args) throws CloneNotSupportedException {
        GithubRepository repository = new GithubRepository();
        repository.setUser("whiteship");
        repository.setName("live-study");

        GithubIssue githubIssue = new GithubIssue(repository);
        githubIssue.setId(1);
        githubIssue.setTitle("1주차 과제: JVM은 무엇이며 자바 코드는 어떻게 실행하는 것인가.");

        String url = githubIssue.getUrl();
        System.out.println(url);

        GithubIssue clone = (GithubIssue) githubIssue.clone();
        System.out.println(clone.getUrl());

        repository.setUser("Keesun");

        System.out.println(clone != githubIssue); //true
        System.out.println(clone.equals(githubIssue)); //false
        System.out.println(clone.getClass() == githubIssue.getClass()); //true
        //자바에서 제공하는 clone을 사용하면 shallow copy(얇은 복사)를 진행하여
        //원본 객체의 repository 객체와 복사한 객체의 repository 객체가 같은 인스턴스를 참조한다.
        System.out.println(clone.getRepository() == githubIssue.getRepository()); //false
        System.out.println(clone.getUrl());
    }
}
```

---

### 4/4(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 프로토타입 패턴 3부<br/>
장점과 단점

-   장점
    -   복잡한 객체를 만드는 과정을 숨길 수 있다.
    -   기존 객체를 복제하는 과정이 새 인스턴스를 만드는 것보다 비용(시간 또는 메모리)적인 면에서 효율적일 수도 있다.
    -   추상적인 타입을 리턴할 수 있다.
-   단점
    -   복제한 객체를 만드는 과정 자체가 복잡할 수 있다.(특히, 순환 참조가 있는 경우)

---

### 4/5(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 프로토타입 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바 Object 클래스의 clone 메소드와 Clonable 인터페이스
-   shallow copy와 deep copy
-   ModelMapper

**자바 리플렉션(Java Reflection): 객체를 통해 클래스의 정보를 분석해 내는 프로그램 기법으로 투영, 반사라는 사전적인 의미를 가지고 있다.**

---

### 4/6(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 어뎁터 패턴 1부<br/>
패턴 소개

**어뎁터(Adaptor) 패턴: 기존 코드를 클라이언트가 사용하는 인터페이스의 구현체로 바꿔주는 패턴<br/>
클라이언트가 사용하는 인터페이스를 따르지 않는 기존 코드를 재사용할 수 있게 해준다.**

---

### 4/7(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 어뎁터 패턴 2부<br/>
패턴 적용하기

```java
//security > LoginHandler(target)
package security;

public class LoginHandler {

    UserDetailsService userDetailsService;

    public LoginHandler(UserDetailsService userDetailsService) {
        this.userDetailsService = userDetailsService;
    }

    public String login(String username, String password) {
        UserDetails userDetails = userDetailsService.loadUser(username);
        if (userDetails.getPassword().equals(password)) {
            return userDetails.getUsername();
        } else {
            throw new IllegalArgumentException();
        }
    }
}
```

```java
//security > UserDetails(target)
package security;

public interface UserDetails {
    String getUsername();
    String getPassword();
}
```

```java
//security > UserDetailsService(target)
package security;

public interface UserDetailsService {
    UserDetails loadUser(String username);
}
```

```java
//Account (Adaptee)
public class Account {
    private String name;
    private String password;
    private String email;

    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
}
```

```java
//AccountService(Adaptee)
public class AccountService {
    public Account findAccountByUsername(String username) {
        Account account = new Account();
        account.setName(username);
        account.setPassword(username);
        account.setEmail(username);
        return account;
    }

    public void createNewAccount(Account account) {
    }

    public void updateAccount(Account account) {
    }
}
```

```java
//AccountUserDetails(Adapter)
public class AccountUserDetails implements UserDetails {
    private Account account;

    public AccountUserDetails(Account account) {
        this.account = account;
    }

    @Override
    public String getUsername() {
        return account.getName();
    }

    @Override
    public String getPassword() {
        return account.getPassword();
    }
}
```

```java
//AccountUserDetailService(Adapter)
public class AccountUserDetailsService implements UserDetailsService {
    private AccountService accountService;

    public AccountUserDetailsService(AccountService accountService) {
        this.accountService = accountService;
    }

    @Override
    public UserDetails loadUser(String username) {
        return new AccountUserDetails(accountService.findAccountByUsername(username));
    }
}
```

```java
//App(Client)
public class App {
    public static void main(String[] args) {
        AccountService accountService = new AccountService();
        UserDetailsService userDetailsService = new AccountUserDetailsService(accountService);
        LoginHandler loginHandler = new LoginHandler(userDetailsService);
        String login = loginHandler.login("keesun", "keesun");
        System.out.println(login);
    }
}
```

---

### 4/8(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 어뎁터 패턴 3부<br/>
장점과 단점

-   장점
    -   기존 코드를 변경하지 않고 원하는 인터페이스 구현체를 만들어 재사용할 수 있다.
    -   기존 코드가 하던 일과 특정 인터페이스 구현체로 변환하는 작업을 각기 다른 클래스로 분리하여 관리할 수 있다.
-   단점
    -   새 클래스가 생겨 복잡도가 증가할 수 있다. 경우에 따라서는 기존 코드가 해당 인터페이스를 구현하도록 수정하는 것이 좋은 선택이 될 수도 있다.

---

### 4/9(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 어뎁터 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바
    -   java.util.Arrays#asList(T...)
    -   java.util.Collections#list(Enumeration), java.util.Collections#enumeration() -> Enumeration<String> enumeration = Collections.enumeration(strings); -> Enumeration<String> enumeration(Target), Collections.enumeration(Adapter), strings(Adaptee)
    -   java.io.InputStreamReader(InputStream)
    -   java.io.OutputStreamWriter(OutputStream)
-   스프링
    -   HandlerAdapter: 우리가 작성하는 다양한 형태의 핸들러 코드를 스프링 MVC가 실행할 수 있는 형태로 변환해주는 어댑터용 인터페이스

---

### 4/10(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 브릿지 패턴 1부<br/>
패턴 소개

**브릿지(Bridge) 패턴: 추상적인 것과 구체적인 것을 분리하여 연결하는 패턴<br/>
하나의 계층 구조일 때보다 각기 나누었을 때 독립적인 계층 구조로 발전시킬 수 있다.**

---

### 4/11(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 브릿지 패턴 2부<br/>
패턴 적용하기

```java
//Skin
public interface Skin {
    String getName();
}
```

```java
//Champion
public interface Champion extends Skin {
    void move();
    void skillQ();
    void skillW();
    void skillE();
    void skillR();
}
```

```java
//DefaultChampion
public class DefaultChampion implements Champion {

    private Skin skin;

    private String name;

    public DefaultChampion(Skin skin, String name) {
        this.skin = skin;
        this.name = name;
    }

    @Override
    public void move() {
        System.out.printf("%s %s move\n", skin.getName(), this.name);
    }

    @Override
    public void skillQ() {
        System.out.printf("%s %s Q\n", skin.getName(), this.name);
    }

    @Override
    public void skillW() {
        System.out.printf("%s %s W\n", skin.getName(), this.name);
    }

    @Override
    public void skillE() {
        System.out.printf("%s %s E\n", skin.getName(), this.name);
    }

    @Override
    public void skillR() {
        System.out.printf("%s %s R\n", skin.getName(), this.name);
    }

    @Override
    public String getName() {
        return null;
    }
}
```

```java
//아리(챔피온 종류 추가)
public class 아리 extends DefaultChampion {
    public 아리(Skin skin) {
        super(skin, "아리");
    }
}
```

```java
//KDA(스킨 종류 추가)
public class KDA implements Skin{
    @Override
    public String getName() {
        return "KDA";
    }
}
```

```java
//App
public abstract class App implements Champion {
    public static void main(String[] args) {
        Champion kda아리 = new 아리(new KDA());
        kda아리.skillQ();
        kda아리.skillW();
    }
}
```

---

### 4/12(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 브릿지 패턴 3부<br/>
장점과 단점

-   장점
    -   추상적인 코드를 구체적인 코드 변경 없이도 독립적으로 확장할 수 있다.
    -   추상적인 코드와 구체적인 코드를 분리하여 사용할 수 있다.
-   단점
    -   계층 구조가 늘어나 복잡도가 증가할 수 있다.
