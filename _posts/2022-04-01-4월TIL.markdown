---
layout: post
title: "2022년 4월 TIL"
date: 2022-04-01 18:00:00 +0900
categories: 202204 TIL
---

### 4/1(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 빌더 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바 8 Stream.Builder API
-   StringBuilder
-   롬복의 @Builder
-   스프링
    -   UriComponentsBuilder
    -   MockMvcWebClientBuilder
    -   ...Builder

---

### 4/2(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 프로토타입 패턴 1부<br/>
패턴 소개

**프로토타입(Prototype factory) 패턴: 기존 인스턴스를 복제하여 새로운 인스턴스를 만드는 방법<br/>
복제 기능을 갖추고 있는 기존 인스턴스를 프로토타입으로 사용해 새 인스턴스를 만들 수 있다.**

---

### 4/3(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 프로토타입 패턴 2부<br/>
패턴 적용하기

```java
public class GithubRepository {

    private String user;
    private String name;

    public String getUser() {
        return user;
    }

    public void setUser(String user) {
        this.user = user;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
```

```java
//GithubIssue(clone 메서드를 사용하기 위해서는 Cloneable 인터페이스를 구현해야 한다.)
public class GithubIssue implements Cloneable {

    private int id;

    private String title;

    private GithubRepository repository;

    public GithubIssue(GithubRepository repository) {
        this.repository = repository;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public GithubRepository getRepository() {
        return repository;
    }

    public String getUrl() {
        return String.format("https://github.com/%s/%s/issues/%d",
                repository.getUser(),
                repository.getName(),
                this.getId());
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        GithubRepository repository = new GithubRepository();
        repository.setUser(this.repository.getUser());
        repository.setName(this.repository.getName());

        GithubIssue githubIssue = new GithubIssue(repository);
        githubIssue.setId(this.id);
        githubIssue.setTitle(this.title);

        return githubIssue;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        GithubIssue that = (GithubIssue) o;
        return id == that.id && Objects.equals(title, that.title) && Objects.equals(repository, that.repository);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, title, repository);
    }
}
```

```java
//App
public class App {
    public static void main(String[] args) throws CloneNotSupportedException {
        GithubRepository repository = new GithubRepository();
        repository.setUser("whiteship");
        repository.setName("live-study");

        GithubIssue githubIssue = new GithubIssue(repository);
        githubIssue.setId(1);
        githubIssue.setTitle("1주차 과제: JVM은 무엇이며 자바 코드는 어떻게 실행하는 것인가.");

        String url = githubIssue.getUrl();
        System.out.println(url);

        GithubIssue clone = (GithubIssue) githubIssue.clone();
        System.out.println(clone.getUrl());

        repository.setUser("Keesun");

        System.out.println(clone != githubIssue); //true
        System.out.println(clone.equals(githubIssue)); //false
        System.out.println(clone.getClass() == githubIssue.getClass()); //true
        //자바에서 제공하는 clone을 사용하면 shallow copy(얇은 복사)를 진행하여
        //원본 객체의 repository 객체와 복사한 객체의 repository 객체가 같은 인스턴스를 참조한다.
        System.out.println(clone.getRepository() == githubIssue.getRepository()); //false
        System.out.println(clone.getUrl());
    }
}
```

---

### 4/4(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 프로토타입 패턴 3부<br/>
장점과 단점

-   장점
    -   복잡한 객체를 만드는 과정을 숨길 수 있다.
    -   기존 객체를 복제하는 과정이 새 인스턴스를 만드는 것보다 비용(시간 또는 메모리)적인 면에서 효율적일 수도 있다.
    -   추상적인 타입을 리턴할 수 있다.
-   단점
    -   복제한 객체를 만드는 과정 자체가 복잡할 수 있다.(특히, 순환 참조가 있는 경우)
