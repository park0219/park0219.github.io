---
layout: post
title: "2022년 3월 TIL"
date: 2022-03-15 23:00:00 +0900
categories: 202203 TIL
---

### 3/15(화)

인프런에 올라온 백기선 님의 코딩으로 학습하는 GoF의 디자인 패턴 강의를 시작했다.

코딩으로 학습하는 GoF의 디자인 패턴 - 싱글톤 패턴 1부<br/>
싱글톤 패턴을 가장 단순히 구현하는 방법

**싱글톤(Singleton) 패턴: 인스턴스를 오직 한 개만 제공하는 클래스<br/>
시스템 런타임, 환경 세팅에 대한 정보 등 인스턴스가 여러 개일 때 문제가 생길 수 있는 경우에 인스턴스를 오직 `한 개만` 만들어 제공하는 클래스가 필요하다.**

싱글톤 패턴을 구현하는 가장 단순한 방식인 private한 생성자와 static한 메소드로 객체를 생성하는 방법에 대해 학습하였다.

```java
//Settings
public class Settings {

    private static Settings instance;

    private Settings() { }

    public static Settings getInstance() {
        if (instance == null) {
            instance = new Settings();
        }
        return instance;
    }
}
```

```java
//App
public class App {
    public static void main(Strings[] args) {
        Settings settings = Settings.getInstance();
        Settings settings1 = Settings.getInstance();
        System.out.println(settings == settings1);
    }
}
```

---

### 3/16(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 싱글톤 패턴 2부<br/>
멀티 쓰레드 환경에서 안전하게 싱글톤 패턴 구현하기

-   synchronized 키워드 사용하기(성능 저하 있음)

```java
//Settings
public class Settings {

    private static Settings instance;

    private Settings() { }

    public static synchronized Settings getInstance() {
        if (instance == null) {
            instance = new Settings();
        }
        return instance;
    }
}
```

-   이른 초기화(eager initialization) 사용하기(인스턴스를 미리 만들기 때문에 로딩 리소스 증가 및 미사용 가능성이 있음)

```java
//Settings
public class Settings {

    private static final Settings INSTANCE = new Settings();

    private Settings() { }

    public static Settings getInstance() {
        return INSTANCE;
    }
}
```

-   double checked locking 사용하기

```java
//Settings
public class Settings {

    //volatile 키워드 사용(자바 1.5 이상)
    private static volatile Settings instance;

    private Settings() { }

    public static Settings getInstance() {
        if (instance == null) {
            synchronized(Settings.class) {
                if(instance == null) {
                    instance = new Settings();
                }
            }
        }
        return instance;
    }
}
```

-   static inner 클래스 사용하기

```java
//Settings
public class Settings {

    private Settings() { }

    private static class SettingsHolder {
        private static final Settings INSTANCE = new Settings();
    }

    public static Settings getInstance() {
        return SettingHolder.INSTANCE;
    }
}
```

---

### 3/17(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 싱글톤 패턴 3부<br/>
싱글톤 패턴 구현 방법을 깨트리는 방법

-   리플렉션 사용하기

```java
//App
public class App {
    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        Settings settings = Settings.getInstance();

        Constructor<Settings> constructor  = Settings.class.getDeclaredConstructor();
        constructor.setAccessible(true);
        Settings settings1 = constructor.newInstance();

        System.out.println(settings == settings1); // false
    }
}
```

-   직렬화 & 역직렬화 사용하기

```java
//Settings
public class Settings implements Serializable {

    private Settings() { }

    private static class SettingsHolder {
        private static final Settings INSTANCE = new Settings();
    }

    public static Settings getInstance() {
        return SettingHolder.INSTANCE;
    }
}
```

```java
//App
public class App {
    public static void main(String[] args) throws IOException {
        Settings settings = Settings.getInstance();
        Settings settings1 = null;

        try (ObjectOutput out = new ObjectOutputStream(new FileOutputStream("settings.obj"))) {
            out.writeObject(settings);
        }

        try (ObjectInput in = new ObjectInputStream(new FileInputStream("settings.obj"))) {
            settings1 = (Settings) in.readObject();
        }

        System.out.println(settings == settings1); // false
    }
}
```

-   역직렬화 대응 방안

```java
//Settings
public class Settings implements Serializable {

    private Settings() { }

    private static class SettingsHolder {
        private static final Settings INSTANCE = new Settings();
    }

    public static Settings getInstance() {
        return SettingHolder.INSTANCE;
    }

    protected Object readResolve() {
        return getInstance();
    }
}
```

---

### 3/18(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 싱글톤 패턴 4부<br/>
안전하고 단순하게 구현하는 방법

-   enum 사용하기

    enum에서는 리플렉션을 통한 생성자 호출을 막는다.<br/>
    또한, enum은 Serializable을 구현하고 있기 때문에 직렬화, 역직렬화에서도 안전하다.<br/>
    단, 클래스를 로딩하는 시점에서 미리 만들어지고, 상속을 사용할 수 없다.(단점)

```java
//Settings
public enum Settings {
    INSTANCE;
}
```

IntelliJ에서 Bytecode 보는 법: `View` > `Show Bytecode` or `shift shift` > `Show Bytecode`

싱글톤 구현할 때 권장하는 구현 방식 2가지

-   static inner 클래스 사용하기
-   enum 사용하기

---

### 3/19(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 싱글톤 패턴 5부<br/>
자바와 스프링에서 찾아보는 패턴

싱글톤 패턴이 사용되는 곳

-   스프링에서 빈의 소프트 중에 하나로 싱글톤 소코프를 사용한다.
-   자바 java.lang.Runtime
-   다른 디자인 패턴(빌더, 퍼사드, 추상 팩토리 등) 구현체의 일부로 쓰이기도 한다.

---

### 3/20(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 팩토리 메소드 패턴 1부<br/>
패턴 소개

**팩토리 메소드(Factory method) 패턴: 구체적으로 어떤 인스턴스를 만들지는 서브 클래스가 정한다.<br/>
다양한 구현체(Product)가 있고, 그중에서 특정한 구현체를 만들 수 있는 다양한 팩토리(Creator)를 제공할 수 있다.**

팩토리 메소드는 개방-폐쇄 원칙을 지킬 수 있도록 해준다.

객체지향설계(SOLID)

-   S: Single responsibility principle(SRP): 단일 책임 원칙 -> 한 클래스는 하나의 책임만 가져야 한다.
-   O: Open/Closed principle(OCP): 개방-폐쇄 원칙 -> 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
-   L: Liskov substitution principle(LSP): 리스코프 치환 원칙 -> 프로그램의 객체는 프로그램의 정확성을 꺠뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
-   I: Interface segregation principle(ISP): 인터페이스 분리 원칙 -> 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
-   D: Dependency inversion principle(DIP): 의존관계 역전 원칙 -> 프로그래머는 추상화에 의존해야지, 구체화에 의존하면 안된다.

팩토리 패턴을 사용하지 않은 배 공장

```java
//Ship
public class Ship {
    private String name;
    private String color;
    private String logo;
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getColor() {
        return color;
    }
    public void setColor(String color) {
        this.color = color;
    }
    public String getLogo() {
        return logo;
    }
    public void setLogo(String logo) {
        this.logo = logo;
    }
    @Override
    public String toString() {
        return "Ship{" +
                "name='" + name + '\'' +
                ", color='" + color + '\'' +
                ", logo='" + logo + '\'' +
                '}';
    }
}
```

```java
//ShipFactory
public class ShipFactory {

    public static Ship orderShip(String name, String email) {
        // validate
        if (name == null || name.isBlank()) {
            throw new IllegalArgumentException("배 이름을 지어주세요.");
        }
        if (email == null || email.isBlank()) {
            throw new IllegalArgumentException("연락처를 남겨주세요.");
        }

        prepareFor(name);

        Ship ship = new Ship();
        ship.setName(name);

        // Customizing for specific name
        if (name.equalsIgnoreCase("whiteShip")) {
            ship.setLogo("\uD83D\uDEE5️");
        } else if (name.equalsIgnoreCase("whiteShip")) {
            ship.setLogo("⚓");
        }

        // coloring
        if (name.equalsIgnoreCase("whiteShip")) {
            ship.setColor("white");
        } else if (name.equalsIgnoreCase("whiteShip")) {
            ship.setColor("black");
        }

        // notify
        sendEmailTo(email, ship);

        return ship;
    }

    private static void prepareFor(String name) {
        System.out.println(name + " 만들 준비 중");
    }

    private static void sendEmailTo(String email, Ship ship) {
        System.out.println(ship.getName() + " 다 만들었습니다.");
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        Ship whiteShip = ShipFactory.orderShip("WhiteShip", "keesun@mail.com");
        System.out.println(whiteShip);

        Ship blackShip = ShipFactory.orderShip("BlackShip", "keesun@mail.com");
        System.out.println(blackShip);
    }
}
```

---

### 3/21(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 팩토리 메소드 패턴 2부<br/>
패턴 적용하기

팩토리 패턴을 사용한 배 공장(Ship 클래스는 그대로 사용)

```java
//ShipFactory
public interface ShipFactory {
    default Ship orderShip(String name, String email) {
        validate(name, email);
        prepareFor(name);
        Ship ship = createShip();
        sendEmailTo(email, ship);
        return ship;
    }

    private void sendEmailTo(String email, Ship ship) {
        System.out.println(ship.getName() + "다 만들었습니다.");
    }

    Ship createShip();

    private void validate(String name, String email) {
        if (name == null || name.isBlank()) {
            throw new IllegalArgumentException("배 이름을 지어주세요.");
        }
        if (email == null || email.isBlank()) {
            throw new IllegalArgumentException("연락처를 남겨주세요.");
        }
    }

    private void prepareFor(String name) {
        System.out.println(name + " 만들 준비 중");
    }
}
```

```java
//WhiteShip
public class WhiteShip extends Ship {
    public WhiteShip() {
        setName("WhiteShip");
        setLogo("\uD83D\uDEE5️");
        setColor("white");
    }
}
```

```java
//BlackShip
public class BlackShip extends Ship {
    public BlackShip() {
        setName("BlackShip");
        setColor("black");
        setLogo("⚓");
    }
}
```

```java
//WhiteShipFactory
public class WhiteShipFactory extends ShipFactory {
    @Override
    public Ship createShip() {
        return new WhiteShip();
    }
}
```

```java
//BlackShipFactory
public class BlackShipFactory extends ShipFactory {
    @Override
    public Ship createShip() {
        return new BlackShip();
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        Client client = new Client();

        Ship whiteShip = new WhiteShipFactory().orderShip("WhiteShip", "keesun@mail.com");
        System.out.println(whiteShip);

        Ship blackShip = new BlackShipFactory().orderShip("BlackShip", "keesun@mail.com");
        System.out.println(blackShip);
    }
}
```

---

### 3/22(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 팩토리 메소드 패턴 3부<br/>
인터페이스 적용하기

인터페이스 적용한 코드(WhiteShip, BlackShip 클래스는 그대로 이용)

```java
//ShipFactory
public interface ShipFactory {
    default Ship orderShip(String name, String email) {
        validate(name, email);
        prepareFor(name);
        Ship ship = createShip();
        sendEmailTo(email, ship);
        return ship;
    }

    void sendEmailTo(String email, Ship ship);

    Ship createShip();

    private void validate(String name, String email) {
        if (name == null || name.isBlank()) {
            throw new IllegalArgumentException("배 이름을 지어주세요.");
        }
        if (email == null || email.isBlank()) {
            throw new IllegalArgumentException("연락처를 남겨주세요.");
        }
    }

    private void prepareFor(String name) {
        System.out.println(name + " 만들 준비 중");
    }
}
```

```java
//DefaultShipFactory
public abstract class DefaultShipFactory implements ShipFactory {
    @Override
    public void sendEmailTo(String email, Ship ship) {
        System.out.println(ship.getName() + " 다 만들었습니다.");
    }
}
```

```java
//WhiteShipFactory
public class WhiteShipFactory extends DefaultShipFactory {
    @Override
    public Ship createShip() {
        return new WhiteShip();
    }
}
```

```java
//BlackShipFactory
public class BlackFactory extends DefaultShipFactory {
    @Override
    public Ship createShip() {
        return new BlackShip();
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        Client client = new Client();
        client.print(new WhiteShipFactory(), "whiteShip", "keesun@mail.com");
        client.print(new BlackShipFactory(), "blackShip", "keesun@mail.com");
    }

    private void print(ShipFactory shipFactory, String name, String email) {
        System.out.println(shipFactory.orderShip(name, email));
    }
}
```

---

### 3/23(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 팩토리 메소드 패턴 4부<br/>
팩토리 메소드 패턴 복습

-   팩토리 메소드 패턴을 적용했을 때의 장점은? 단점은?

    => 장점: 확장에 열려있고 변경에 닫혀있는 객체 지향 원칙을 적용해서 인스턴스를 만드는 과정이 담겨있는 로직을 수정하지 않고, 이와 같은 류의 새로운 인스턴스를 다른 방법으로 확장할 수 있다. 가능해지게된 이유는 product와 creator 간의 느슨한 겹합을 하기 때문이다. <br/>
    => 단점: 팩토리 패턴을 사용하면 각 역할에 따라 클래스를 생성하기 때문에 클래스 개수가 늘어난다.

-   "확장에 열려있고 변경에 닫혀있는 객체 지향 원칙"을 설명하세요.

    => '변경에 닫혀있다'는 기존 코드를 변경하지 않고도 애플리케이션의 동작을 추가 및 변경할 수 있다는 뜻이고, '확장에 열려있다'는 애플리케이션의 요구사항이 변경될 때 이 변경에 맞게 새로운 동작을 추가할 수 있다는 뜻이다.

-   자바 8에 추가된 default 메소드에 대해 설명하세요.

    => 자바 8에서는 인터페이스에 기본 구현체를 만들수 있게 되었고, 그 인터페이스를 구현하는 클래스 혹은 상속하는 또 다른 인터페이스에서 해당 구현체를 사용할 수 있도록 변경되었다. default 메소드를 사용할 수 있게 됨으로써 추상 클래스의 사용 빈도가 줄었다.

---

### 3/24(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 팩토리 메소드 패턴 5부<br/>
자바와 스프링에서 찾아보는 패턴

-   단순한 팩토리 패턴
    -   매개변수의 값에 따라 또는 메소드에 따라 각기 다른 인스턴스를 리턴하는 단순한 버전의 팩토리 패턴
    -   예시) java.lang.Calendar 또는 java.lang.NumberFormat
-   스프링 BeanFactory
    -   Object 타입의 Product를 만드는 BeanFactory라는 Creator가 있다.

---

### 3/25(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 추상 팩토리 패턴 1부<br/>
패턴 소개

**추상 팩토리(Abstract factory) 패턴: 서로 관련있는 여러 객체를 만들어주는 인터페이스.(팩토리 메소드 패턴과 유사하지만 초점이 팩토리를 사용하는 클라이언트에 있다.)<br/>
구체적으로 어떤 클래스의 인스턴스(concrete product)를 사용하는지 감출 수 있다 .**

코드 변경없이 제품군을 늘려나갈 수 있도록 추상 팩토리 패턴을 사용한다.

```java
//WhiteShipFactory(팩토리 메소드에서 사용한 DefaultShipFactory 클래스 상속)
public class WhiteShipFactory extends DefaultShipFactory {
    @Override
    public Ship createShip() {
        Ship ship = new WhiteShip();
        //추상 팩토리 패턴을 사용 안 했을 때
        //배의 부품이 변경될 때 바뀌는 코드 시작점
        ship.setAnchor(new WhiteAnchor());
        ship.setWheel(new WhiteWheel());
        //배의 부품이 변경될 때 바뀌는 코드 끝점
        return ship;
    }
}
```

---

### 3/26(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 추상 팩토리 패턴 1부<br/>
패턴 적용하기

```java
//Anchor
public interface Anchor {
}
```

```java
//Wheel
public interface Wheel {
}
```

```java
//ShipPartsFactory
public interface ShipPartsFactory {
    Anchor createAnchor();
    Wheel createWheel();
}
```

```java
//WhiteShipPartsFactory
 public class WhiteShipPartsFactory implements ShipPartsFactory {
    @Override
    public Anchor createAnchor() {
        return new WhiteAnchor();
    }
    @Override
    public Wheel createWheel() {
        return new WhiteWheel();
    }
}
```

```java
//WhiteShipFactory(팩토리 메소드 패턴에서 사용한 DefaultShipFactory, WhiteShip 그대로 사용) - 클라이언트
public class WhiteShipFactory extends DefaultShipFactory {

    private ShipPartsFactory shipPartsFactory;

    public WhiteShipFactory(ShipPartsFactory shipPartsFactory) {
        this.shipPartsFactory = shipPartsFactory;
    }

    @Override
    public Ship createShip() {
        Ship ship = new WhiteShip();
        ship.setAnchor(shipPartsFactory.createAnchor());
        ship.setWheel(shipPartsFactory.createWheel());
        return ship;
    }
}
```

Ship 객체 Anchor, Wheel 부분 수정

```java
private Wheel wheel;
private Anchor anchor;
```

변경되는 부품

```java
//WhiteAnchorPro
public class WhiteAnchorPro implements Anchor{
}
```

```java
//WhiteWheelPro
public class WhiteWheelPro implements Wheel {
}
```

변경된 부품을 사용하는 공장

```java
public class WhitePartsProFactory implements ShipPartsFactory {
    @Override
    public Anchor createAnchor() {
        return new WhiteAnchorPro();
    }

    @Override
    public Wheel createWheel() {
        return new WhiteWheelPro();
    }
}
```

확인 코드

```java
//ShipInventory
public class ShipInventory {
    public static void main(String[] args) {
        //ShipFactory shipFactory = new WhiteShipFactory(new WhiteShipPartsFactory()); //공장을 바꾸면 배의 부품도 변경된다.
        ShipFactory shipFactory = new WhiteShipFactory(new WhiteShipPartsProFactory());
        Ship ship = shipFactory.createShip();
        System.out.println(ship.getAnchor().getClass());
        System.out.println(ship.getWheel().getClass());
    }
}
```
