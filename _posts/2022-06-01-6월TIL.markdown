---
layout: post
title: "2022년 6월 TIL"
date: 2022-06-01 22:00:00 +0900
categories: 202206 TIL
---

### 6/1(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 옵저버 패턴 5부  
스프링에서 찾아보는 패턴

-   스프링
    -   ApplicationContext와 ApplicationEvent

---

### 6/2(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 상태 패턴 1부  
패턴 소개

**상태(State) 패턴: 객체 내부 상태 변경에 따라 객체의 행동이 달라지는 패턴  
상태에 특화된 행동들을 분리해 낼 수 있으며, 새로운 행동을 추가하더라도 다른 행동에 영향을 주지 않는다.**

---

### 6/3(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 상태 패턴 2부  
패턴 적용하기

```java
//Student
public class Student {
    private String name;

    public Student(String name) {
        this.name = name;
    }

    private Set<OnlineCourse> onlineCourses = new HashSet<>();

    public boolean isAvailable(OnlineCourse onlineCourse) {
        return onlineCourses.contains(onlineCourse);
    }

    public void addPrivate(OnlineCourse onlineCourse) {
        this.onlineCourses.add(onlineCourse);
    }

    @Override
    public String toString() {
        return "Student{" +
                "name='" + name + '\'' +
                '}';
    }
}
```

```java
//OnlineCourse
public class OnlineCourse {
    private State state = new Draft(this);

    private List<Student> students = new ArrayList<>();

    private List<String> reviews = new ArrayList<>();

    public void addStudent(Student student) {
        this.state.addStudent(student);
    }

    public void addReview(String review, Student student) {
        this.state.addReview(review, student);
    }

    public State getState() {
        return state;
    }

    public List<Student> getStudents() {
        return students;
    }

    public List<String> getReviews() {
        return reviews;
    }

    public void changeState(State state) {
        this.state = state;
    }
}
```

```java
//State
public interface State {
    void addReview(String review, Student student);

    void addStudent(Student student);
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        OnlineCourse onlineCourse = new OnlineCourse();
        Student student = new Student("whiteship");
        Student keesun = new Student("keesun");
        keesun.addPrivate(onlineCourse);

        onlineCourse.addStudent(student);

        onlineCourse.changeState(new Private(onlineCourse));

        onlineCourse.addReview("hello", student);

        onlineCourse.addStudent(keesun);

        System.out.println(onlineCourse.getState());
        System.out.println(onlineCourse.getReviews());
        System.out.println(onlineCourse.getStudents());
    }
}
```

```java
//Draft
public class Draft implements State {
    private OnlineCourse onlineCourse;

    public Draft(OnlineCourse onlineCourse) {
        this.onlineCourse = onlineCourse;
    }

    @Override
    public void addReview(String review, Student student) {
        throw new UnsupportedOperationException("드래프트 상태에서는 리뷰를 남길 수 없습니다.");
    }

    @Override
    public void addStudent(Student student) {
        this.onlineCourse.getStudents().add(student);
        if (this.onlineCourse.getStudents().size() > 1) {
            this.onlineCourse.changeState(new Private(this.onlineCourse));
        }
    }
}
```

```java
//Private
public class Private implements State {
    private OnlineCourse onlineCourse;

    public Private(OnlineCourse onlineCourse) {
        this.onlineCourse = onlineCourse;
    }

    @Override
    public void addReview(String review, Student student) {
        if (this.onlineCourse.getStudents().contains(student)) {
            this.onlineCourse.getReviews().add(review);
        } else {
            throw new UnsupportedOperationException("프라이빗 코스를 수강하는 학생만 리뷰를 남길 수 있습니다.");
        }
    }

    @Override
    public void addStudent(Student student) {
        if (student.isAvailable(this.onlineCourse)) {
            this.onlineCourse.getStudents().add(student);
        } else {
            throw new UnsupportedOperationException("프라이빗 코스를 수강할 수 없습니다.");
        }
    }
}
```

```java
//Published
public class Published implements State {
    private OnlineCourse onlineCourse;

    public Published(OnlineCourse onlineCourse) {
        this.onlineCourse = onlineCourse;
    }

    @Override
    public void addReview(String review, Student student) {
        this.onlineCourse.getReviews().add(review);
    }

    @Override
    public void addStudent(Student student) {
        this.onlineCourse.getStudents().add(student);
    }
}
```

---

### 6/4(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 상태 패턴 3부  
장점과 단점

-   장점
    -   상태에 따른 동작을 개별 클래스로 옮겨서 관리할 수 있다.
    -   기존의 특정 상태에 따른 동작을 변경하지 않고 새로운 상태에 다른 동작을 추가할 수 있다.
    -   코드 복잡도를 줄일 수 있다.
-   단점
    -   복잡도가 증가한다.

---

### 6/5(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 전략 패턴 1부  
패턴 소개

**전략(Strategy) 패턴: 여러 알고리즘을 캡슐화하고 상호 교환 가능하게 만드는 패턴  
컨텍스트에서 사용할 알고리즘을 클라이언트가 선택한다.**

---

### 6/6(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 전략 패턴 2부  
패턴 적용하기

```java
//BlueLightRedLight
public class BlueLightRedLight {
    public void blueLight(Speed speed) {
        speed.blueLight();
    }

    public void redLight(Speed speed) {
        speed.redLight();
    }
}
```

```java
//Speed
public interface Speed {
    void blueLight();
    void redLight();
}
```

```java
//Normal
public class Normal implements Speed {
    @Override
    public void blueLight() {
        System.out.println("무 궁 화    꽃   이");
    }

    @Override
    public void redLight() {
        System.out.println("피 었 습 니  다.");
    }
}
```

```java
//Faster
public class Faster implements Speed {
    @Override
    public void blueLight() {
        System.out.println("무궁화꽃이");
    }

    @Override
    public void redLight() {
        System.out.println("피었습니다.");
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        BlueLightRedLight game = new BlueLightRedLight();
        game.blueLight(new Normal());
        game.redLight(new Faster());
        game.blueLight(new Speed() {
            @Override
            public void blueLight() {
                System.out.println("blue light");
            }

            @Override
            public void redLight() {
                System.out.println("red light");
            }
        });
    }
}
```

---

### 6/7(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 전략 패턴 3부  
장점과 단점

-   장점
    -   새로운 전략을 추가하더라도 기존 코드를 변경하지 않는다.
    -   상속 대신 위임을 사용할 수 있다.
    -   런타임에 전략을 변경할 수 있다.
-   단점
    -   복잡도가 증가한다.
    -   클라이언트 코드가 구체적인 전략을 알아야 한다.

---

### 6/8(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 전략 패턴 4부  
자바와 스프링에서 찾아보는 패턴

-   자바
    -   Comparator
-   스프링
    -   ApplicationContext
    -   PlatformTransactionManager

---

### 6/9(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 템플릿 메소드 패턴 1부  
패턴 소개

**템플릿 메소드(Template method) 패턴: 알고리즘 구조를 서브 클래스가 확장할 수 있도록 템플릿으로 제공하는 방법  
추상 클래스는 템플릿을 제공하고 하위 클래스는 구체적인 알고리즘을 제공한다.**

---

### 6/10(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 템플릿 메소드 패턴 2부  
패턴 적용하기

```java
//FileProcessor
public abstract class FileProcessor {
    private String path;

    public FileProcessor(String path) {
        this.path = path;
    }

    public final int process(Operator operator) {
        try(BufferedReader reader = new BufferedReader(new FileReader(path))) {
            int result = 0;
            String line = null;
            while((line = reader.readLine()) != null) {
                result = getResult(result, Integer.parseInt(line));
            }
            return result;
        } catch (IOException e) {
            throw new IllegalArgumentException(path + "에 해당하는 파일이 없습니다.", e);
        }
    }

    protected abstract int getResult(int result, int number);
}
```

```java
//Plus
public class Plus extends FileProcessor {
    public Plus(String path) {
        super(path);
    }

    @Override
    protected int getResult(int result, int number) {
        return result *= number;
    }
}
```

```java
//Multiply
public class Multiply extends FileProcessor {
    public Multiply(String path) {
        super(path);
    }

    @Override
    protected int getResult(int result, int number) {
        return result *= number;
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        FileProcessor fileProcessor = new Multiply("number.txt");
        int result = fileProcessor.process((sum, number) -> sum += number);
        System.out.println(result);
    }
}
```

**템플릿 콜백(Template-Callback) 패턴: 콜백으로 상속 대신 위임을 사용하는 템플릿 패턴  
상속 대신 익명 내부 클래스 또는 람다 표현식을 활용할 수 있다.**

```java
//Operator
public interface Operator {
    abstract int getResult(int result, int number);
}
```

```java
//FileProcessor
public class FileProcessor {
    private String path;
    public FileProcessor(String path) {
        this.path = path;
    }

    public final int process(Operator operator) {
        try(BufferedReader reader = new BufferedReader(new FileReader(path))) {
            int result = 0;
            String line = null;
            while((line = reader.readLine()) != null) {
                result = getResult(result, Integer.parseInt(line));
            }
            return result;
        } catch (IOException e) {
            throw new IllegalArgumentException(path + "에 해당하는 파일이 없습니다.", e);
        }
    }
}
```

```java
//Plus
public class Plus implements Operator {
    @Override
    public int getResult(int result, int number) {
        return result += number;
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        FileProcessor fileProcessor = new FileProcessor("number.txt");
        int result = fileProcessor.process((sum, number) -> sum += number);
        System.out.println(result);
    }
}
```

---

### 6/11(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 템플릿 메소드 패턴 3부  
장점과 단점

-   장점
    -   템플릿 코드를 재사용하고 중복 코드를 줄일 수 있다.
    -   템플릿 코드를 변경하지 않고 상속을 받아서 구체적인 알고리즘만 변경할 수 있다.
-   단점
    -   리스코프 치환 원칙을 위반할 수도 있다.
    -   알고리즘 구조가 복잡할수록 템플릿을 유지하기 어려워진다.

---

### 6/12(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 템플릿 메소드 패턴 4부  
자바와 스프링에서 찾아보는 패턴

-   자바
    -   HttpServlet
-   스프링
    -   템플릿 메소드 패턴
        -   Configuration
    -   템플릿 콜백 패턴
        -   JdbcTemplate
        -   RestTemplate

---

### 6/13(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 방문자 패턴 1부  
패턴 소개

**방문자(Visitor) 패턴: 기존 코드를 변경하지 않고 새로운 기능을 추가하는 방법  
더블 디스패치(Double Dispatch)를 활용할 수 있다.**

디스패치(Dispatch): 어떤 메서드를 호출할 것인가를 결정하는 과정이다. -> 메서드의 의존성을 결정하는 과정

-   정적 디스패치: 런타임이 아닌 컴파일타임에 컴파일러, 사용자, 바이트 코드 모두 어떤 메서드가 실행될지 아는 것이다.
-   동적 디스패치: 런타임에 어떤 메서드를 실행시킬지 결정하는 것이다. 런타임에 메서드를 호출할 때 receiver parameter를 보고 어떤 객체인지 판단 후 그 클래스의 메서드를 호출한다.
-   더블 디스패치: 동적 디스패치를 두 번 하는 것이다.

---

### 6/14(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 방문자 패턴 2부  
패턴 적용하기

```java
//Shape
public interface Shape {
    void accept(Device device);
}
```

```java
//Circle
public class Circle implements Shape {
    @Override
    public void accept(Device device) {
        device.print(this);
    }
}
```

```java
//Rectangle
public class Rectangle implements Shape {
   @Override
    public void accept(Device device) {
        device.print(this);
    }
}
```

```java
//Triangle
public class Triangle implements Shape {
   @Override
    public void accept(Device device) {
        device.print(this);
    }
}
```

```java
//Device
public interface Device {
    void print(Circle circle);
    void print(Rectangle rectangle);
    void print(Triangle triangle);
}
```

```java
//Phone
public class Phone implements Device {
    @Override
    public void print(Circle circle) {
        System.out.println("Print Circle to Phone");
    }

    @Override
    public void print(Rectangle rectangle) {
        System.out.println("Print Rectangle to Phone");

    }

    @Override
    public void print(Triangle triangle) {
        System.out.println("Print Triangle to Phone");
    }
}
```

```java
//Watch
public class Watch implements Device {
    @Override
    public void print(Circle circle) {
        System.out.println("Print Circle to Watch");
    }

    @Override
    public void print(Rectangle rectangle) {
        System.out.println("Print Rectangle to Watch");
    }

    @Override
    public void print(Triangle triangle) {
        System.out.println("Print Triangle to Watch");
    }
}
```

```java
//Pad
public class Pad implements Device {
    @Override
    public void print(Circle circle) {
        System.out.println("Print Circle to Pad");
    }

    @Override
    public void print(Rectangle rectangle) {
        System.out.println("Print Rectangle to Pad");
    }

    @Override
    public void print(Triangle triangle) {
        System.out.println("Print Triangle to Pad");
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        Shape rectangle = new Rectangle();
        Device device = new Pad();
        rectangle.accept(device);
    }
}
```

---

### 6/15(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 방문자 패턴 3부  
장점과 단점

-   장점
    -   기존 코드를 변경하지 않고 새로운 코드를 추가할 수 있다.
    -   추가 기능을 한 곳에 모아둘 수 있다.
-   단점
    -   복잡하다.
    -   새로운 Element를 추가하거나 제거할 때 모든 Visitor 코드를 변경해야 한다.

---

### 6/16(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 방문자 패턴 4부  
자바와 스프링에서 찾아보는 패턴

-   자바
    -   FileVisitor, SimpleFileVisitor
    -   AnnotationValueVisitor
    -   ElementVisitor
-   스프링
    -   BeanDefinitionVisitor

---

### 6/17(금)

객체지향의 사실과 오해 - 1. 협력하는 객체들의 공동체  
협력하는 객체들의 공동체

#### 객체지향 용어 정리

-   객체지향: 실세계를 직접적이고, 직관적으로 모델링할 수 있는 패러다임이다.
-   객체지향 프로그래밍: 현실 속에 존재하는 사물을 최대한 유사하게 모방해 소프트웨어 내부로 옴겨오는 작업이다.
-   객체지향 소프트웨어: 실세계의 투영이다.
-   객체: 현실 셰게에 존재하는 사물에 대한 추상화이다.
-   객체지향의 목표: 실세계를 모방하는 것이 아니라 새로운 세계를 **창조**하는 것이다.

> 객체를 스스로 생각하고 스스로 결정하는 현실 세계의 생명체에 비유하는 것은 상태와 행위를 캡슐화(encapsulation)하는 소프트웨어 객체의 자율성(autonomous)을 설명하는 데 효과적이다. 현실 세계의 사람들이 암묵적인 약속과 명시적인 계약을 기반으로 협력하며 목표를 달성해 나가는 과정은 메시지(message)를 주고받으며 공동의 목표를 달성하기 위해 협력(collaboration)하는 객체들의 관계를 설명하는 데 적합하다. 실세계의 사물을 기반으로 스프트웨어 객체를 식별하고 구현까지 이어간다는 개념은 객체지향 설계의 핵심 사상인 **연결완전성(seamlessness)**을 설명하는 데 적합한 틀을 제공한다.

---

### 6/18(토)

객체지향의 사실과 오해 - 1. 협력하는 객체들의 공동체  
협력하는 사람들

[커피 공화국의 아침]  
**역할, 책임, 협력**은 우리가 삶을 영위하기 위해 다른 사람과 접촉하는 모든 곳에 존재한다.

[요청과 응답으로 구성된 협력]  
사람들은 스스로 해결하지 못하는 문제와 마주치면 문제 해결에 필요한 지식을 알고 있거나 서비스를 제공해줄 수 있는 사람에게 도움을 **요청(request)**한다.  
일반적으로 하나의 문제를 해결하기 위해 다수의 사람 혹은 역할이 필요하기 때문에 한 사람에 대한 요청이 또 다른 사람에 대한 요청을 유발하는 것이 일반적이다.  
따라서 요청은 **연쇄적**으로 발생한다.
요청을 받은 사람은 주어진 책임을 다하면서 필요한 지식이나 서비스를 제공한다. 즉 다른 사람의 요청에 **응답(response)**한다.  
응답 또한 요청의 반대 방향으로 **연쇄적**으로 전달된다.
요청과 응답을 통해 다른 사람과 **협력(collaboration)**할 수 있는 능력은 인간으로 하여금 거대하고 복잡한 문제를 해결할 수 있는 공동체를 형성할 수 있게 만든다.  
협력의 성공은 특정한 역할을 맡은 각 개인이 얼마나 요청을 성실히 이행하는가에 달려 있다.

[역할과 책임]  
사람들은 다른 사람과 협력하는 과정 속에서 특정한 **역할(role)**을 부여받는다.  
역할이라는 단어는 의미적으로 **책임(responsibility)**이라는 개념을 내포한다.  
특정한 역할은 특정한 책임을 암시한다. 협력에 참여하며 특정한 역할을 수행하는 사람들은 역할에 적합한 책임을 수행하게 된다.
역할과 책임은 협력이 원활하게 진행되는 데 필요한 핵심적인 구성요소이다.
사람들이 협력을 위해 특정한 역할을 맡고 역할에 적합한 책임을 수행한다는 사실은 몇 가지 중요한 개념을 제시한다.

-   여러 사람이 동일한 역할을 수행할 수 있다.
-   역할은 대체 가능성을 의미한다.(substitutable)
-   책임을 수행하는 방법은 자율적으로 선택할 수 있다.
-   한 사람이 동시에 여러 역할을 수행할 수 있다.

---

### 6/19(일)

객체지향의 사실과 오해 - 1. 협력하는 객체들의 공동체
역할, 책임, 협력

[기능을 구현하기 위해 협력하는 객체들]  
실셰계의 커피를 주문하는 과정은 객체지향의 핵심적으로 중요한 개념을 대부분 포함한다.  
사람이라는 단어를 객체로, 에어전트의 요청을 메시지로, 에이전트가 요청을 처리하는 방법을 메서드로 바꾸면 대부분의 설명을 객체지향이라는 문맥으로 옮겨올 수 있다.

[역할과 책임을 수행하며 협력하는 객체들]  
협력의 핵심은 특정한 책임을 수행하는 역할들 간의 연쇄적인 요청과 응답을 통해 목표를 달성한다는 것이다.  
시스템은 역할과 책임을 수행하는 객체로 분활되고 시스템의 기능은 객체 간의 연쇄적인 요청과 응답으로 구성된 협력으로 구현된다.  
**객체지향 설계는 적절한 객체에게 적절한 책임을 할당하는 것에서 시작된다.**  
객체의 역할

-   여러 객체가 동일한 역할을 수행할 수 있다.
-   역할은 대체 가능성을 의미한다.
-   각 객체는 책임을 수행하는 방법을 자율적으로 선택할 수 있다.
-   하나의 객체가 동시에 여러 역할을 수행할 수 있다.

**역할은 유연하고 재사용 가능한 협력 관계를 구축하는 데 중요한 설계 요소이다.**  
**대체 가능한 역할**과 **책임**은 객체지향 패러다임의 중요한 기반을 제공하는 **다형성**과도 깊이 연관돼있다.

---

### 6/20(월)

객체지향의 사실과 오해 - 1. 협력하는 객체들의 공동체  
협력 속에 사는 객체

객체지향 애플리케이션의 윤곽을 결정하는 것은 역할, 책임, 협력이지만 실제로 협력에 참여하는 주체는 **객체**다.  
만약 실행 중인 애플리케이션의 내부를 눈으로 직접 볼 수 있다면 그 안에는 쉴 새 없이 메시지를 주고받으며 협력하는 객체가 존재한다는 것을 확인할 수 있을 것이다.  
객체는 애플리케이션의 기능을 구현하기 위해 존재한다. 아주 작은 기능조차 객체 혼자 감당하기에는 버거울 정도로 복잡하고 거대하기 때문에 일반적으로 객체는 다른 객체와의 협력을 통해 기능을 구현하게 된다.

협력 공동체의 일원으로서 객체는 **협력**과 **자율** 두 가지 덕목을 갖춰야 한다.  
첫째, 객체는 충분히 **협력적**이여야 한다. 객체는 다른 객체의 요청에 충실히 귀 기울이고, 다른 객체에게 적극적으로 도움을 요청할 정도로 열린 마음을 지녀야 한다.  
외부의 도움을 무시한채 모든 것을 처리하려고 하는 전지전능한 객체(god object)는 내부 복잡도에 의해 자멸한다.  
둘째, 객체는 충분히 **자율적**이여야 한다. '자율적'이라는 단어 뜻은 자기 스스로의 원칙에 따라 어떤 일을 하거나 자기 스스로를 통제하여 절제하는 것이다.  
객체 공동체에 속한 객체들은 공동의 목표를 달성하기 위해 협력에 참여하지만 스스로의 결정과 판단에 따라 행동하는 자율적인 존재이다.

[상태와 행동을 함께 지닌 자율적인 객체]  
흔히 객체를 **상태(state)**와 **행동(behavior)**을 함께 지닌 실체라고 정의한다. 이 말은 객체가 협력에 참여하기 위해 어떤 행동을 해야 한다면 그 행동을 하는 데 필요한 상태도 함께 지니고 있어야 한다는 것을 의미한다.  
객체가 협력에 참여하는 과정 속에서 스스로 판단하고 스스로 결정하는 자율적인 존재로 남기 위해서는 필요한 행동과 상태를 함께 지니고 있어야 한다.

객체의 자율성은 객체의 내부와 외부를 명확하게 구분하는 것으로부터 나온다. 객체는 다른 객체가 **무엇(what)**을 수행하는지는 알 수 있지만, **어떻게(how)**수행하는지에 대해서는 알 수가 없다.  
자율화된 객체로 구성된 공동체는 유지보수가 쉽고 재사용이 용이한 시스템을 구축할 수 있는 가능성을 제시한다.

[협력과 메시지]  
객체지향의 세계에서는 **메시지**를 사용하여 의사소통 한다. 한 객체가 다른 객체에게 요청하는 것을 메시지를 전송한다고 말하고 다른 객체로부터 요청을 받는 것을 메시지를 수신한다고 말한다.  
이때 메시지는 전송하는 객체를 **송신사(sender)**라고 부르고 메시지를 수신하는 객체를 **수신자(receiver)**라고 부른다.

[메서드와 자율성]
객체는 다른 객체와 협력하기 위해 메시지를 전송한다. 수신자는 먼저 수신된 메시지를 이해할 수 있는지 여부를 판단한 후 미리 정해진 자신만의 방법에 따라 메시지를 처리한다.  
이처럼 객체가 수신된 메시지를 처리하는 방법을 **메서드(method)**라고 부른다.  
객체지향 프로그래밍 언어에서 메서드는 클래스 안에 포함된 함수 또는 프로시저를 통해 구현된다. 따라서 어떤 객체에게 메시지를 전송하면 결과적으로 메시지에 대응되는 특정 메서드가 실행된다.  
메시지와 메서드의 분리는 객체의 협력에 참여하는 객체들 간의 자율성을 증진시킨다.

외부의 요청이 무엇인지를 표현하는 메시지와 요청을 처리하기 위한 구체적인 방법인 메서드를 분리하는 것은 객체의 자율성을 높이는 핵심 메커니즘이다.  
이것은 **캡슐화(encapsulation)**라는 개념과도 깊이 관련되어 있다.
