---
layout: post
title: "2022년 6월 TIL"
date: 2022-06-01 22:00:00 +0900
categories: 202206 TIL
---

### 6/1(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 옵저버 패턴 5부  
스프링에서 찾아보는 패턴

-   스프링
    -   ApplicationContext와 ApplicationEvent

---

### 6/2(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 상태 패턴 1부  
패턴 소개

**상태(State) 패턴: 객체 내부 상태 변경에 따라 객체의 행동이 달라지는 패턴  
상태에 특화된 행동들을 분리해 낼 수 있으며, 새로운 행동을 추가하더라도 다른 행동에 영향을 주지 않는다.**

---

### 6/3(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 상태 패턴 2부  
패턴 적용하기

```java
//Student
public class Student {
    private String name;

    public Student(String name) {
        this.name = name;
    }

    private Set<OnlineCourse> onlineCourses = new HashSet<>();

    public boolean isAvailable(OnlineCourse onlineCourse) {
        return onlineCourses.contains(onlineCourse);
    }

    public void addPrivate(OnlineCourse onlineCourse) {
        this.onlineCourses.add(onlineCourse);
    }

    @Override
    public String toString() {
        return "Student{" +
                "name='" + name + '\'' +
                '}';
    }
}
```

```java
//OnlineCourse
public class OnlineCourse {
    private State state = new Draft(this);

    private List<Student> students = new ArrayList<>();

    private List<String> reviews = new ArrayList<>();

    public void addStudent(Student student) {
        this.state.addStudent(student);
    }

    public void addReview(String review, Student student) {
        this.state.addReview(review, student);
    }

    public State getState() {
        return state;
    }

    public List<Student> getStudents() {
        return students;
    }

    public List<String> getReviews() {
        return reviews;
    }

    public void changeState(State state) {
        this.state = state;
    }
}
```

```java
//State
public interface State {
    void addReview(String review, Student student);

    void addStudent(Student student);
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        OnlineCourse onlineCourse = new OnlineCourse();
        Student student = new Student("whiteship");
        Student keesun = new Student("keesun");
        keesun.addPrivate(onlineCourse);

        onlineCourse.addStudent(student);

        onlineCourse.changeState(new Private(onlineCourse));

        onlineCourse.addReview("hello", student);

        onlineCourse.addStudent(keesun);

        System.out.println(onlineCourse.getState());
        System.out.println(onlineCourse.getReviews());
        System.out.println(onlineCourse.getStudents());
    }
}
```

```java
//Draft
public class Draft implements State {
    private OnlineCourse onlineCourse;

    public Draft(OnlineCourse onlineCourse) {
        this.onlineCourse = onlineCourse;
    }

    @Override
    public void addReview(String review, Student student) {
        throw new UnsupportedOperationException("드래프트 상태에서는 리뷰를 남길 수 없습니다.");
    }

    @Override
    public void addStudent(Student student) {
        this.onlineCourse.getStudents().add(student);
        if (this.onlineCourse.getStudents().size() > 1) {
            this.onlineCourse.changeState(new Private(this.onlineCourse));
        }
    }
}
```

```java
//Private
public class Private implements State {
    private OnlineCourse onlineCourse;

    public Private(OnlineCourse onlineCourse) {
        this.onlineCourse = onlineCourse;
    }

    @Override
    public void addReview(String review, Student student) {
        if (this.onlineCourse.getStudents().contains(student)) {
            this.onlineCourse.getReviews().add(review);
        } else {
            throw new UnsupportedOperationException("프라이빗 코스를 수강하는 학생만 리뷰를 남길 수 있습니다.");
        }
    }

    @Override
    public void addStudent(Student student) {
        if (student.isAvailable(this.onlineCourse)) {
            this.onlineCourse.getStudents().add(student);
        } else {
            throw new UnsupportedOperationException("프라이빗 코스를 수강할 수 없습니다.");
        }
    }
}
```

```java
//Published
public class Published implements State {
    private OnlineCourse onlineCourse;

    public Published(OnlineCourse onlineCourse) {
        this.onlineCourse = onlineCourse;
    }

    @Override
    public void addReview(String review, Student student) {
        this.onlineCourse.getReviews().add(review);
    }

    @Override
    public void addStudent(Student student) {
        this.onlineCourse.getStudents().add(student);
    }
}
```

---

### 6/4(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 상태 패턴 3부  
장점과 단점

-   장점
    -   상태에 따른 동작을 개별 클래스로 옮겨서 관리할 수 있다.
    -   기존의 특정 상태에 따른 동작을 변경하지 않고 새로운 상태에 다른 동작을 추가할 수 있다.
    -   코드 복잡도를 줄일 수 있다.
-   단점
    -   복잡도가 증가한다.

---

### 6/5(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 전략 패턴 1부  
패턴 소개

**전략(Strategy) 패턴: 여러 알고리즘을 캡슐화하고 상호 교환 가능하게 만드는 패턴  
컨텍스트에서 사용할 알고리즘을 클라이언트가 선택한다.**

---

### 6/6(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 전략 패턴 2부  
패턴 적용하기

```java
//BlueLightRedLight
public class BlueLightRedLight {
    public void blueLight(Speed speed) {
        speed.blueLight();
    }

    public void redLight(Speed speed) {
        speed.redLight();
    }
}
```

```java
//Speed
public interface Speed {
    void blueLight();
    void redLight();
}
```

```java
//Normal
public class Normal implements Speed {
    @Override
    public void blueLight() {
        System.out.println("무 궁 화    꽃   이");
    }

    @Override
    public void redLight() {
        System.out.println("피 었 습 니  다.");
    }
}
```

```java
//Faster
public class Faster implements Speed {
    @Override
    public void blueLight() {
        System.out.println("무궁화꽃이");
    }

    @Override
    public void redLight() {
        System.out.println("피었습니다.");
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        BlueLightRedLight game = new BlueLightRedLight();
        game.blueLight(new Normal());
        game.redLight(new Faster());
        game.blueLight(new Speed() {
            @Override
            public void blueLight() {
                System.out.println("blue light");
            }

            @Override
            public void redLight() {
                System.out.println("red light");
            }
        });
    }
}
```

---

### 6/7(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 전략 패턴 3부  
장점과 단점

-   장점
    -   새로운 전략을 추가하더라도 기존 코드를 변경하지 않는다.
    -   상속 대신 위임을 사용할 수 있다.
    -   런타임에 전략을 변경할 수 있다.
-   단점
    -   복잡도가 증가한다.
    -   클라이언트 코드가 구체적인 전략을 알아야 한다.

---

### 6/8(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 전략 패턴 4부  
자바와 스프링에서 찾아보는 패턴

-   자바
    -   Comparator
-   스프링
    -   ApplicationContext
    -   PlatformTransactionManager

---

### 6/9(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 템플릿 메소드 패턴 1부  
패턴 소개

**템플릿 메소드(Template method) 패턴: 알고리즘 구조를 서브 클래스가 확장할 수 있도록 템플릿으로 제공하는 방법  
추상 클래스는 템플릿을 제공하고 하위 클래스는 구체적인 알고리즘을 제공한다.**

---

### 6/10(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 템플릿 메소드 패턴 2부  
패턴 적용하기

```java
//FileProcessor
public abstract class FileProcessor {
    private String path;

    public FileProcessor(String path) {
        this.path = path;
    }

    public final int process(Operator operator) {
        try(BufferedReader reader = new BufferedReader(new FileReader(path))) {
            int result = 0;
            String line = null;
            while((line = reader.readLine()) != null) {
                result = getResult(result, Integer.parseInt(line));
            }
            return result;
        } catch (IOException e) {
            throw new IllegalArgumentException(path + "에 해당하는 파일이 없습니다.", e);
        }
    }

    protected abstract int getResult(int result, int number);
}
```

```java
//Plus
public class Plus extends FileProcessor {
    public Plus(String path) {
        super(path);
    }

    @Override
    protected int getResult(int result, int number) {
        return result *= number;
    }
}
```

```java
//Multiply
public class Multiply extends FileProcessor {
    public Multiply(String path) {
        super(path);
    }

    @Override
    protected int getResult(int result, int number) {
        return result *= number;
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        FileProcessor fileProcessor = new Multiply("number.txt");
        int result = fileProcessor.process((sum, number) -> sum += number);
        System.out.println(result);
    }
}
```

**템플릿 콜백(Template-Callback) 패턴: 콜백으로 상속 대신 위임을 사용하는 템플릿 패턴  
상속 대신 익명 내부 클래스 또는 람다 표현식을 활용할 수 있다.**

```java
//Operator
public interface Operator {
    abstract int getResult(int result, int number);
}
```

```java
//FileProcessor
public class FileProcessor {
    private String path;
    public FileProcessor(String path) {
        this.path = path;
    }

    public final int process(Operator operator) {
        try(BufferedReader reader = new BufferedReader(new FileReader(path))) {
            int result = 0;
            String line = null;
            while((line = reader.readLine()) != null) {
                result = getResult(result, Integer.parseInt(line));
            }
            return result;
        } catch (IOException e) {
            throw new IllegalArgumentException(path + "에 해당하는 파일이 없습니다.", e);
        }
    }
}
```

```java
//Plus
public class Plus implements Operator {
    @Override
    public int getResult(int result, int number) {
        return result += number;
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        FileProcessor fileProcessor = new FileProcessor("number.txt");
        int result = fileProcessor.process((sum, number) -> sum += number);
        System.out.println(result);
    }
}
```

---

### 6/11(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 템플릿 메소드 패턴 3부  
장점과 단점

-   장점
    -   템플릿 코드를 재사용하고 중복 코드를 줄일 수 있다.
    -   템플릿 코드를 변경하지 않고 상속을 받아서 구체적인 알고리즘만 변경할 수 있다.
-   단점
    -   리스코프 치환 원칙을 위반할 수도 있다.
    -   알고리즘 구조가 복잡할수록 템플릿을 유지하기 어려워진다.

---

### 6/12(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 템플릿 메소드 패턴 4부  
자바와 스프링에서 찾아보는 패턴

-   자바
    -   HttpServlet
-   스프링
    -   템플릿 메소드 패턴
        -   Configuration
    -   템플릿 콜백 패턴
        -   JdbcTemplate
        -   RestTemplate

---

### 6/13(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 방문자 패턴 1부  
패턴 소개

**방문자(Visitor) 패턴: 기존 코드를 변경하지 않고 새로운 기능을 추가하는 방법  
더블 디스패치(Double Dispatch)를 활용할 수 있다.**

디스패치(Dispatch): 어떤 메서드를 호출할 것인가를 결정하는 과정이다. -> 메서드의 의존성을 결정하는 과정

-   정적 디스패치: 런타임이 아닌 컴파일타임에 컴파일러, 사용자, 바이트 코드 모두 어떤 메서드가 실행될지 아는 것이다.
-   동적 디스패치: 런타임에 어떤 메서드를 실행시킬지 결정하는 것이다. 런타임에 메서드를 호출할 때 receiver parameter를 보고 어떤 객체인지 판단 후 그 클래스의 메서드를 호출한다.
-   더블 디스패치: 동적 디스패치를 두 번 하는 것이다.

---

### 6/14(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 방문자 패턴 2부  
패턴 적용하기

```java
//Shape
public interface Shape {
    void accept(Device device);
}
```

```java
//Circle
public class Circle implements Shape {
    @Override
    public void accept(Device device) {
        device.print(this);
    }
}
```

```java
//Rectangle
public class Rectangle implements Shape {
   @Override
    public void accept(Device device) {
        device.print(this);
    }
}
```

```java
//Triangle
public class Triangle implements Shape {
   @Override
    public void accept(Device device) {
        device.print(this);
    }
}
```

```java
//Device
public interface Device {
    void print(Circle circle);
    void print(Rectangle rectangle);
    void print(Triangle triangle);
}
```

```java
//Phone
public class Phone implements Device {
    @Override
    public void print(Circle circle) {
        System.out.println("Print Circle to Phone");
    }

    @Override
    public void print(Rectangle rectangle) {
        System.out.println("Print Rectangle to Phone");

    }

    @Override
    public void print(Triangle triangle) {
        System.out.println("Print Triangle to Phone");
    }
}
```

```java
//Watch
public class Watch implements Device {
    @Override
    public void print(Circle circle) {
        System.out.println("Print Circle to Watch");
    }

    @Override
    public void print(Rectangle rectangle) {
        System.out.println("Print Rectangle to Watch");
    }

    @Override
    public void print(Triangle triangle) {
        System.out.println("Print Triangle to Watch");
    }
}
```

```java
//Pad
public class Pad implements Device {
    @Override
    public void print(Circle circle) {
        System.out.println("Print Circle to Pad");
    }

    @Override
    public void print(Rectangle rectangle) {
        System.out.println("Print Rectangle to Pad");
    }

    @Override
    public void print(Triangle triangle) {
        System.out.println("Print Triangle to Pad");
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        Shape rectangle = new Rectangle();
        Device device = new Pad();
        rectangle.accept(device);
    }
}
```

---

### 6/15(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 방문자 패턴 3부  
장점과 단점

-   장점
    -   기존 코드를 변경하지 않고 새로운 코드를 추가할 수 있다.
    -   추가 기능을 한 곳에 모아둘 수 있다.
-   단점
    -   복잡하다.
    -   새로운 Element를 추가하거나 제거할 때 모든 Visitor 코드를 변경해야 한다.

---

### 6/16(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 방문자 패턴 4부  
자바와 스프링에서 찾아보는 패턴

-   자바
    -   FileVisitor, SimpleFileVisitor
    -   AnnotationValueVisitor
    -   ElementVisitor
-   스프링
    -   BeanDefinitionVisitor

---

### 6/17(금)

객체지향의 사실과 오해 - 1. 협력하는 객체들의 공동체  
협력하는 객체들의 공동체

#### 객체지향 용어 정리

-   객체지향: 실세계를 직접적이고, 직관적으로 모델링할 수 있는 패러다임이다.
-   객체지향 프로그래밍: 현실 속에 존재하는 사물을 최대한 유사하게 모방해 소프트웨어 내부로 옴겨오는 작업이다.
-   객체지향 소프트웨어: 실세계의 투영이다.
-   객체: 현실 셰게에 존재하는 사물에 대한 추상화이다.
-   객체지향의 목표: 실세계를 모방하는 것이 아니라 새로운 세계를 **창조**하는 것이다.

> 객체를 스스로 생각하고 스스로 결정하는 현실 세계의 생명체에 비유하는 것은 상태와 행위를 캡슐화(encapsulation)하는 소프트웨어 객체의 자율성(autonomous)을 설명하는 데 효과적이다. 현실 세계의 사람들이 암묵적인 약속과 명시적인 계약을 기반으로 협력하며 목표를 달성해 나가는 과정은 메시지(message)를 주고받으며 공동의 목표를 달성하기 위해 협력(collaboration)하는 객체들의 관계를 설명하는 데 적합하다. 실세계의 사물을 기반으로 스프트웨어 객체를 식별하고 구현까지 이어간다는 개념은 객체지향 설계의 핵심 사상인 **연결완전성(seamlessness)**을 설명하는 데 적합한 틀을 제공한다.

---

### 6/18(토)

객체지향의 사실과 오해 - 1. 협력하는 객체들의 공동체  
협력하는 사람들

[커피 공화국의 아침]  
**역할, 책임, 협력**은 우리가 삶을 영위하기 위해 다른 사람과 접촉하는 모든 곳에 존재한다.

[요청과 응답으로 구성된 협력]  
사람들은 스스로 해결하지 못하는 문제와 마주치면 문제 해결에 필요한 지식을 알고 있거나 서비스를 제공해줄 수 있는 사람에게 도움을 **요청(request)**한다.  
일반적으로 하나의 문제를 해결하기 위해 다수의 사람 혹은 역할이 필요하기 때문에 한 사람에 대한 요청이 또 다른 사람에 대한 요청을 유발하는 것이 일반적이다.  
따라서 요청은 **연쇄적**으로 발생한다.
요청을 받은 사람은 주어진 책임을 다하면서 필요한 지식이나 서비스를 제공한다. 즉 다른 사람의 요청에 **응답(response)**한다.  
응답 또한 요청의 반대 방향으로 **연쇄적**으로 전달된다.
요청과 응답을 통해 다른 사람과 **협력(collaboration)**할 수 있는 능력은 인간으로 하여금 거대하고 복잡한 문제를 해결할 수 있는 공동체를 형성할 수 있게 만든다.  
협력의 성공은 특정한 역할을 맡은 각 개인이 얼마나 요청을 성실히 이행하는가에 달려 있다.

[역할과 책임]  
사람들은 다른 사람과 협력하는 과정 속에서 특정한 **역할(role)**을 부여받는다.  
역할이라는 단어는 의미적으로 **책임(responsibility)**이라는 개념을 내포한다.  
특정한 역할은 특정한 책임을 암시한다. 협력에 참여하며 특정한 역할을 수행하는 사람들은 역할에 적합한 책임을 수행하게 된다.
역할과 책임은 협력이 원활하게 진행되는 데 필요한 핵심적인 구성요소이다.
사람들이 협력을 위해 특정한 역할을 맡고 역할에 적합한 책임을 수행한다는 사실은 몇 가지 중요한 개념을 제시한다.

-   여러 사람이 동일한 역할을 수행할 수 있다.
-   역할은 대체 가능성을 의미한다.(substitutable)
-   책임을 수행하는 방법은 자율적으로 선택할 수 있다.
-   한 사람이 동시에 여러 역할을 수행할 수 있다.

---

### 6/19(일)

객체지향의 사실과 오해 - 1. 협력하는 객체들의 공동체
역할, 책임, 협력

[기능을 구현하기 위해 협력하는 객체들]  
실셰계의 커피를 주문하는 과정은 객체지향의 핵심적으로 중요한 개념을 대부분 포함한다.  
사람이라는 단어를 객체로, 에어전트의 요청을 메시지로, 에이전트가 요청을 처리하는 방법을 메서드로 바꾸면 대부분의 설명을 객체지향이라는 문맥으로 옮겨올 수 있다.

[역할과 책임을 수행하며 협력하는 객체들]  
협력의 핵심은 특정한 책임을 수행하는 역할들 간의 연쇄적인 요청과 응답을 통해 목표를 달성한다는 것이다.  
시스템은 역할과 책임을 수행하는 객체로 분활되고 시스템의 기능은 객체 간의 연쇄적인 요청과 응답으로 구성된 협력으로 구현된다.  
**객체지향 설계는 적절한 객체에게 적절한 책임을 할당하는 것에서 시작된다.**  
객체의 역할

-   여러 객체가 동일한 역할을 수행할 수 있다.
-   역할은 대체 가능성을 의미한다.
-   각 객체는 책임을 수행하는 방법을 자율적으로 선택할 수 있다.
-   하나의 객체가 동시에 여러 역할을 수행할 수 있다.

**역할은 유연하고 재사용 가능한 협력 관계를 구축하는 데 중요한 설계 요소이다.**  
**대체 가능한 역할**과 **책임**은 객체지향 패러다임의 중요한 기반을 제공하는 **다형성**과도 깊이 연관돼있다.

---

### 6/20(월)

객체지향의 사실과 오해 - 1. 협력하는 객체들의 공동체  
협력 속에 사는 객체

객체지향 애플리케이션의 윤곽을 결정하는 것은 역할, 책임, 협력이지만 실제로 협력에 참여하는 주체는 **객체**다.  
만약 실행 중인 애플리케이션의 내부를 눈으로 직접 볼 수 있다면 그 안에는 쉴 새 없이 메시지를 주고받으며 협력하는 객체가 존재한다는 것을 확인할 수 있을 것이다.  
객체는 애플리케이션의 기능을 구현하기 위해 존재한다. 아주 작은 기능조차 객체 혼자 감당하기에는 버거울 정도로 복잡하고 거대하기 때문에 일반적으로 객체는 다른 객체와의 협력을 통해 기능을 구현하게 된다.

협력 공동체의 일원으로서 객체는 **협력**과 **자율** 두 가지 덕목을 갖춰야 한다.  
첫째, 객체는 충분히 **협력적**이여야 한다. 객체는 다른 객체의 요청에 충실히 귀 기울이고, 다른 객체에게 적극적으로 도움을 요청할 정도로 열린 마음을 지녀야 한다.  
외부의 도움을 무시한채 모든 것을 처리하려고 하는 전지전능한 객체(god object)는 내부 복잡도에 의해 자멸한다.  
둘째, 객체는 충분히 **자율적**이여야 한다. '자율적'이라는 단어 뜻은 자기 스스로의 원칙에 따라 어떤 일을 하거나 자기 스스로를 통제하여 절제하는 것이다.  
객체 공동체에 속한 객체들은 공동의 목표를 달성하기 위해 협력에 참여하지만 스스로의 결정과 판단에 따라 행동하는 자율적인 존재이다.

[상태와 행동을 함께 지닌 자율적인 객체]  
흔히 객체를 **상태(state)**와 **행동(behavior)**을 함께 지닌 실체라고 정의한다. 이 말은 객체가 협력에 참여하기 위해 어떤 행동을 해야 한다면 그 행동을 하는 데 필요한 상태도 함께 지니고 있어야 한다는 것을 의미한다.  
객체가 협력에 참여하는 과정 속에서 스스로 판단하고 스스로 결정하는 자율적인 존재로 남기 위해서는 필요한 행동과 상태를 함께 지니고 있어야 한다.

객체의 자율성은 객체의 내부와 외부를 명확하게 구분하는 것으로부터 나온다. 객체는 다른 객체가 **무엇(what)**을 수행하는지는 알 수 있지만, **어떻게(how)**수행하는지에 대해서는 알 수가 없다.  
자율화된 객체로 구성된 공동체는 유지보수가 쉽고 재사용이 용이한 시스템을 구축할 수 있는 가능성을 제시한다.

[협력과 메시지]  
객체지향의 세계에서는 **메시지**를 사용하여 의사소통 한다. 한 객체가 다른 객체에게 요청하는 것을 메시지를 전송한다고 말하고 다른 객체로부터 요청을 받는 것을 메시지를 수신한다고 말한다.  
이때 메시지는 전송하는 객체를 **송신사(sender)**라고 부르고 메시지를 수신하는 객체를 **수신자(receiver)**라고 부른다.

[메서드와 자율성]
객체는 다른 객체와 협력하기 위해 메시지를 전송한다. 수신자는 먼저 수신된 메시지를 이해할 수 있는지 여부를 판단한 후 미리 정해진 자신만의 방법에 따라 메시지를 처리한다.  
이처럼 객체가 수신된 메시지를 처리하는 방법을 **메서드(method)**라고 부른다.  
객체지향 프로그래밍 언어에서 메서드는 클래스 안에 포함된 함수 또는 프로시저를 통해 구현된다. 따라서 어떤 객체에게 메시지를 전송하면 결과적으로 메시지에 대응되는 특정 메서드가 실행된다.  
메시지와 메서드의 분리는 객체의 협력에 참여하는 객체들 간의 자율성을 증진시킨다.

외부의 요청이 무엇인지를 표현하는 메시지와 요청을 처리하기 위한 구체적인 방법인 메서드를 분리하는 것은 객체의 자율성을 높이는 핵심 메커니즘이다.  
이것은 **캡슐화(encapsulation)**라는 개념과도 깊이 관련되어 있다.

---

### 6/21(화)

객체지향의 사실과 오해 - 1. 협력하는 객체들의 공동체  
객체지향의 본질

-   객체지향이란 시스템을 상호작용하는 **자율적인 객체들의 공동체**로 바라보고 객체를 이용해 시스템을 분할하는 방식이다.
-   자율적인 객체란 **상태**와 **행위**를 함께 지니며 스스로 자기 자신을 책임지는 객체를 의미한다.
-   객체는 시스템의 행위를 구현하기 위해 다른 객체와 **협력**한다. 각 객체는 협력 내에서 정해진 **역할**을 수행하며 역할은 관련된 **책임**의 집합이다.
-   객체는 다른 객체와 협력하기 위해 메시지를 전송하고 **메시지**를 수신한 객체는 메시지를 처리하는 데 적합한 **메서드**를 자율적으로 선택한다.

[객체를 지향하라]
초기 객체지향 프로그래미 언어의 초점은 새로운 개념의 데이터 추상화를 제공하는 클래스라는 빌딩 블록에 맞춰져 있었다.  
지나치게 클래스를 강조하는 프로그래밍 언어적인 관점은 객체의 캡슐화를 저해하고 클래스를 서로 강하게 결합시킨다.  
애플리케이션을 협력하는 객체들의 공동체가 아닌 클래스로 구성된 설계도로 보는 관점은 유연하고 확장 가능한 애플리케이션의 구축을 방해한다.

휼륭한 객체지향 설계자가 되기 위해 거쳐야할 첫 번째 도전은 **코드를 담는 클래스의 관점에서 메시지를 주고받는 객체의 관점으로 사고의 중심을 전환하는 것**이다.  
중요한 것은 어떤 클래스가 필요한가가 아니라 어떤 객체들이 어떤 메시지를 주고받으며, 협력하는가다.  
**적절한 책임을 수행하는 역할 간의 유연하고 견고한 협력 관계를 구축하는 것**이다.  
객체지향의 중심에는 클래스가 아니라 객체가 위치하며, 중요한 것은 클래스들의 정적인 관계가 아니라 메시지를 주고받는 객체들의 동적인 관계다.

**클래스의 구조와 메서드가 아니라 객체의 역할, 책임, 협력에 집중하라. 객체지향은 객체를 지향하는 것이지 클래스를 지향하는 것이 아니다.**

---

### 6/22(수)

객체지향의 사실과 오해 - 2. 이상한 나라의 객체  
객체지향과 인지 능력

> 객체지향 패러다임은 지식을 추상화하고 추상화한 지식을 객체 안에 캡슐화함으로써 실세계 문제에 내제된 복잡성을 관리하려고 한다. 객체를 발견하고 창조하는 것은 지식과 행동을 구조화하는 문제다. - 레베카 워프스브록

객체지향은 세상을 자율적이고 독립적인 객체들로 분해할 수 있는 인간의 기본적인 인지 능력에 기반을 두고 있다.  
주위를 둘러보면 객체라고 부를 수 있는 다향한 존재를 볼 수 있다. 하나의 단위로 인식할 수 있고 다른 사물과 구분할 수 있는 모든 것들이 모여 객체의 스펙트럼을 형성한다.  
인간이 직접적으로 지각할 수 있는 대부분의 객체는 물리적인 경계를 지닌 구체적인 사물이다. 그러나 인간의 인지 능력은 물리적인 한계를 넘어 개념적으로 경계 지을 수 있는 추상적인 사물까지도 객체로 인식할 수 있다.  
세상을 더 작은 객체로 분해하는 것은 본질적으로 세상이 포함하고 있는 복잡성을 극복하기 위한 인간의 작은 몸부림이다.  
즉, **객체란 인간이 분명하게 인지하고 구별할 수 있는 물리적인 또는 개념적인 경계를 지닌 어떤 것이다.**

객체지향 패러다임은 인간이 인지할 수 있는 다양한 객체들이 모여 현실 세계를 이루는 것처럼 소프트웨어의 세계 역시 인간이 인지할 수 있는 다양한 소프트웨어 객체들이 모여 이뤄져 있다는 믿음에서 출발한다.  
객체지향 패러다임의 목적은 현실 세계를 모방하는 것이 아니라 **현실 세계를 기반으로 새로운 세계를 창조**하는 것이다. 따라서 소프트웨어 세계에서 살아가는 객체는 현실 세계에 존재하는 객체와는 전혀 다른 모습을 보이는 것이 일반적이다.  
실행 중인 객체지향 애플리케이션의 내부를 들여다볼 수 있다면 겉으로는 우리가 알고있는 세계와 유사해 보이지만 본질적으로 매우 이질적인 모습을 지닌 세계와 마주치게 될 것이다.

---

### 6/23(목)

객체지향의 사실과 오해 - 2. 이상한 나라의 객체  
객체, 그리고 이상한 나라

[앨리스 객체]
이상한 나라의 앨리스 이야기와 객체지향의 객체들은 중요한 공통점 몇 가지를 공유한다.  
앨리스의 키는 시간의 흐흠에 따라 계속 변한다. 앨리스의 키를 변하시키는 것은 앨리스의 행동으로 앨리스의 행동에 따라 앨리스의 상태가 변한다.  
앨리스의 상태를 결정하는 것은 행동이지만 행동의 결과를 결정하는 것은 상태다. 또한, 앨리스가 한 행동의 결과는 앨리스의 상태에 의존적이다.  
어떤 행동의 성공 여부는 이전에 어떤 행동들이 발생했는지에 영향을 받는다. 특정 행동이 성공하기 위해서는 행동의 순서가 중요하다.  
행동에 의해 앨리스의 상태가 변경되더라도 앨리스가 앨리스라는 사실은 변하지 않는다. 앨리스는 상태 변경과 무관하게 유일한 존재로 **식별 가능**하다.

-   앨리스는 상태를 가지며 상태는 변경 가능하다.
-   앨리스의 상태를 변경시키는 것은 앨리스의 행동이다.
    -   행동의 결과는 상태에 의존적이며 상태를 이용해 서술할 수 있다.
    -   행동의 순서가 결과에 영향을 미친다.
-   앨리스는 어떤 상태에 있더라도 유일하게 식별 가능하다.

---

### 6/24(금)

객체지향의 사실과 오해 - 2. 이상한 나라의 객체  
객체, 그리고 소프트웨어 나라

하나의 개별적인 실체로 식별 가능한 물리적인 또는 개념적인 사물은 어떤 것이라도 객체가 될 수 있다.  
인간의 인지 능력 안에서 개수를 셀 수 있고, 다른 사물과 구분할 수 있으며, 생성 시점을 알 수 있고, 독립적인 하나의 단위로 인식할 수 있는 모든 사물은 객체다.  
객체를 **상태(state)**, **행동(behavior)**, **식별자(identity)**를 지닌 실체로 보는 것이 가장 효과적이다.

> 객체란?  
> 객체란 식별 가능한 개체 또는 사물이다. 객체는 자동차처럼 만질 수 있는 구체적인 사물일 수도 있고, 시간처럼 추상적인 개념일 수도 있다. 객체는 구별 가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가진다. 소프트웨어 안에서 객체는 저장된 상태와 실행 가능한 코드를 통해 구현된다.

[상태]  
-왜 상태가 필요한가  
객체가 주변 환경과의 상호작용에 어떻게 반응하는가는 그 시점까지 객체에 어떤 일이 발생했느냐에 좌우된다.  
어떤 행동의 결과는 과거에 어떤 행동들이 일어났었느냐에 의존한다.  
일반적으로 과거에 발생한 행동의 이력을 통해 현재 발생한 행동의 결과를 판단하는 방식은 복잡하고 번거로우며 이해하기 어렵다. 따라서 인간은 행동의 과정과 결과를 단순하게 기술하기 위해 **상태**라는 개념을 고안했다.  
상태를 이용하면 과거의 모든 행동 이력을 설명하지 않고도 행동의 결과를 쉽게 예측하고 설명할 수 있다.  
상태를 이용하면 과거에 얽매이지 않고 현재를 기반으로 객체의 행동 방식을 이해할 수 있기 때문에 상태는 근본적으로 세상의 복잡성을 완화하고 인지 과부하를 줄일 수 있는 중요한 개념이다.

-상태와 프로퍼티  
세상에 존재하는 모든 것들이 객체인 것은 아니다. 숫자, 문자열, 양, 속도, 시간, 날짜, 참/거짓과 같은 단순한 값들은 객체가 아니다. 단순한 값들은 그 자체로 독립적인 의미를 가지기보다는 다른 객체의 특성을 표현하는 데 사용된다. -> 다른 객체의 상태를 표현하기 위해 사용한다.
모든 객체의 상태는 단순한 값과 객체의 조합으로 표현할 수 있다. 객체의 상태를 구성하는 모든 특징을 통틀어 객체의 **프로퍼티(property)**라고 한다. 일반적으로 프로퍼티는 변경되지 않고 고정되기 때문에 **정적**이다. 반면 **프로퍼티 값(property value)**은 시간이 흐름에 따라 변경되기 때문에 **동적**이다.  
객체와 객체 사이의 의미 있는 연결을 **링크(link)**라고 한다. 객체와 객체 사이에는 링크가 존재해야만 요청을 보내고 받을 수 있다. -> 객체의 링크를 통해서만 **메시지**를 주고받을 수 있다.  
객체 간의 선으로 표현되는 링크와 달리 객체를 구성하는 단순한 값은 **속성(attribute)**이라고 한다. 객체의 프로퍼티는 단순한 값인 속성과 다른 객체를 가리키는 링크라는 두 가지 종류의 조합으로 표현할 수 있다.  
=> 프로퍼티는 속성과 연관관계의 두 가지 종류로 구분되며 연관관계는 정적인 관계를 의미하고, 링크는 연관관계의 인스턴스다.

> 객체의 상태란?  
> 상태는 특정 시점에 객체가 가지고 있는 정보의 집합으로 객체의 구조적 특징을 표현한다. 객체의 상태는 객체에 존재하는 정적인 프로퍼티와 동적인 프로퍼티 값으로 구성된다. 객체의 프로퍼티는 단순한 값과 다른 객체를 참조하는 링크로 구분할 수 있다.

객체는 자율적인 존재이기 때문에 객체지향의 세계에서 객체는 다른 객체의 상태에 직접적으로 겁근할 수도, 상태를 변경할 수도 없다. 외부의 객체가 직접적으로 객체의 상태를 주무를 수 없다면 간접적으로 객체의 상태를 변경하거나 조회할 수 있는 방법이 필요하다.  
이때 **행동**이 등장한다. 행동은 다른 객체로 하여금 간접적으로 객체의 상태를 변경하는 것을 가능하게 한다.  
객체지향의 기본 사상은 상태와 상태를 조작하기 위한 행동을 하나의 단위로 묶는 것이다. 객체는 스스로의 행동에 의해서만 상태가 변경되는 것을 보장함으로써 객체의 자율성을 유지한다.

---

### 6/25(토)

객체지향의 사실과 오해 - 2. 이상한 나라의 객체  
객체, 그리고 소프트웨어 나라

[행동]  
-상태와 행동  
객체의 상태는 저절로 변경되지 않는다. 객체의 상태를 변경하는 것은 객체의 자발적인 행동뿐이다.  
객체가 취하는 행동은 객체 자신의 상태를 변경시키니다. 객체의 행동에 의해 객체의 상태가 변경된다는 것은 행동이 **부수 효과(side effect)**를 초래한다는 것을 의미한다. 부수 효과의 개념을 이용하면 객채의 행동을 상태 변경의 관점에서 쉽게 기술할 수 있다.  
객체의 행동은 객체의 상태를 변경시키지만 행동의 결과는 객체의 상태에 의존적이다.  
상태와 행동 사이의 관계:

-   객체의 행동은 상태에 영향을 받는다.
-   객체의 행동은 상태를 변경시킨다.

상태라는 개념을 이용해 행동을 아래 두 가지 관점에서 서술할 수 있다:

-   상호작용이 현재의 상태에 어떤 방식으로 의존하는가
-   상호작용이 어떻게 현재의 상태를 변경시키는가

-협력과 행동  
객체는 자신에게 주어진 책임을 오나수하기 위해 다른 객체를 이용하고 다른 객체에게 서비스를 제공한다.  
객체가 다른 객체와 협력하는 유일한 방법은 다른 객체에게 **요청**을 보내는 것이다. 요청을 수신한 객체는 요청을 처리하기 위해 적절한 방법에 따라 행동한다. => 객체의 행동은 객체가 협력에 참여할 수 있는 유일한 방법이다.  
객체는 메시지를 통해서 다른 객체와 의사소통할 수 있기 때문에 객체가 어떤 행동을 핟로고 만드는 것은 객체가 외부로부터 수신한 메시지다. 객체는 수신된 메시지에 따라 적절히 행동하면서 협력에 참여하고 그 결과로 잣니의 상태를 변경한다.  
객체는 협력에 참여하는 과정에서 자기 자신의 상태뿐만 아니라 다른 객체의 상태 변경을 유발할 수도 있다.  
객체의 행동으로 인해 발생하는 결과:

-   객체 자신의 상태 변경
-   행동 내에서 협력하는 다른 객체에 대한 메시지 전송

> 행동이란?  
> 행동이란 외부의 요청 또는 수신된 메시지에 응답하기 위해 동작하고 반응하는 활동이다. 행동의 결과로 객체는 자신의 상태를 변경하거나 다른 객체에게 메시지를 전달할 수 있다. 객체는 행동을 통해 다른 객체와의 협력에 참여하므로 행동은 외부에 가시적이어야 한다.

-상태 캡슐화  
현실 세계의 객체와 객체지향 세계의 객체 사이에는 중요한 차이점이 있다. 현실 세계에는 능동적인 존재와 수동적인 존재가 있지만, 객체지향의 세계에서 모든 객체는 자신의 상태를 스스로 관리하는 자율적인 존재이다.  
한 행동에 의해 다른 객체의 상태도 변경되어야 한다면 다른 객체에게 메시지를 전송하는 방법만 존재한다. 다른 객체의 상태가 바뀔지는 해당 메시지를 수신한 객체가 결정할 사항으로 메시지 송신자는 메시지 수신자의 상태 변경에 대해서는 전혀 알지 못한다.  
이는 캡슐화를 의미하는 것으로 객체는 상태를 캡슐 안에 감춰둔 채 외부로 노출하지 않는다. 객체가 외부로 노출하는 것은 행동뿐이며, 외부에서 접근할 수 있는 유일한 방법 역시 행동뿐이다.  
상태를 외부에 노출시키지 않고 행동을 경계로 캡슐화하는 것은 결과적으로 객체의 자율성을 높인다. 자율적인 객체는 스스로 판단하고 스스로 결정하기 때문에 객체의 자율성이 높아질수록 객체의 지능도 높아진다.

**상태를 잘 정의된 행동 집합 뒤로 캡슐화하는 것은 객체의 자율성을 높이고 협력을 단순하고 유연하게 만든다. 이것이 상태를 캡슐화해야 하는 이유다.**

---

### 6/26(일)

객체지향의 사실과 오해 - 2. 이상한 나라의 객체  
객체, 그리고 소프트웨어 나라

[식별자]  
객체란 인간의 인지 능력을 이용해 식별 가능한 경계를 가진 모든 사물을 의미한다. 객체가 식별 가능하다는 것은 객체를 서로 구별할 수 있는 특정한 프로퍼티가 객체 안에 존재한다는 것을 의미한다. 이 프로퍼티를 **식별자**라고 한다. 모든 객체는 식별자를 가지며 식별자를 이용해 객체를 구별할 수 있다.  
값과 객체의 가장 큰 차이점은 값은 식별자를 가지지 않지만 객체는 식별자를 가진다는 점이다.  
**값(value)**은 숫자, 문자열, 날짜, 시간 금액 등과 같이 변하지 않는 양을 모델링한다. 흔히 값의 상태는 변하지 않기 때문에 **불변 상태(immutable state)**를 가진다고 말한다. 값의 경우 두 인스턴스의 상태가 같다면 두 인스턴스를 같은 것으로 판단한다.  
값이 같은지 여부는 상태가 같은지를 통해 판단한다. 값의 상태가 같으면 두 인스턴스는 동일한 것으로 판단하고 상태가 다르면 두 인스턴스는 다른 것으로 판단한다. 이처럼 상태를 이용해 두 값이 같은지 판단한 수 있는 성질을 **동등성(equality)**이라고 한다. 값은 오직 상태만을 이용해 동등성을 판단하기 때문에 인스턴스를 구별하기 위한 별도의 식별자를 필요로 하지 않는다.  
**객체**는 시간에 따라 변경되는 상태를 포함하며, 행동을 통해 상태를 변경한다. 따라서 객체는 **가변 상태(mutable state)**를 가진다고 말한다. 타입이 같은 두 객체의 상태가 완전히 똑같더라도 두 객체는 독립적인 별개의 객체로 다뤄야 한다.  
객체는 상태와 무관하게 두 객체를 동일하거나 다르다고 판단할 수 있는 프로퍼티를 가진다. 두 객체의 상태가 다르더라도 식별자가 같다면 두 객체를 같은 객체로 판단할 수 있다. 이처럼 식별자를 기반으로 객체가 같은지를 판단할 수 있는 성질을 **동일성(identical)**이라고 한다.  
객체의 동일성을 상태를 기반으로 판단할 수 없는 이유는 시간이 흐름에 따라 객체의 상태가 변하기 떄문이다. 상태가 가변적인 두 객체의 동일성을 판단하기 위해서는 상태 변경에 독립적인 별도의 식별자를 이용할 수밖에 없다.

> 식별자란?  
> 식별자란 어떤 객체를 다른 객체와 구분하는 데 사용하는 객체의 프로퍼티다. 값은 식별자를 가지지 않기 때문에 상태를 이용한 동등성 검사를 통해 두 인스턴스를 비교해야 한다. 객체는 상태가 변경될 수 있기 때문에 식별자를 이용한 동일성 검사를 통해 두 인스턴스를 비교할 수 있다.

값과 객체 모두 대부분의 객체지향 프로그래밍 언어에서 클래스를 이용해 구현되기 때문에 차이점을 혼란스러워한다. 객체지향 언어의 관점에서 값과 객체 모두 클래스로부터 생성된 객체이기 때문에 문맥에 따라 그 의미가 혼란스러워질 수 있다.  
오해의 소지를 줄이기 위해 객체와 값을 지칭하는 별도의 용어로를 사용한다. **참조 객체(reference object)**, 또는 **엔티티(entity)**는 식별자를 지닌 전통적인 의미의 객체를 가리키는 용어다. **값 객체(value object)**는 식별자를 가지지 않는 값을 가리키는 용어다.

객체의 특성:

-   객체는 상태를 가지며 상태는 변경 가능하다.
-   객체의 상태를 변경시키는 것은 객체의 행동이다.
    -   행동의 결과는 상태에 의존적이며 상태를 이용해 서술할 수 있다.
    -   행동의 순서가 실행 결과에 영향을 미친다.
-   객체는 어떤 상태에 있더라도 유일하게 식별 가능하다.

---

### 6/27(월)

객체지향의 사실과 오해 - 2. 이상한 나라의 객체  
기계로서의 객체

객체지향의 세계를 창조하는 개발자들의 주된 업무는 객체의 상태를 조회하고 객체의 상태를 변경하는 것이다. 일반적으로 객체의 상태를 조회하는 작업을 **쿼리(query)**라고 하고 객체의 상태를 변경하는 작업을 **명령(command)**이라고 한다.  
버트란드 마이어는 객체를 기계에 비유하여 설명한다. 기계로서의 객체라는 이미지는 차가운 금속 외피로 둘러싸인 블랙박스다. 기계의 부품은 단단한 금속 외피 안에 감춰져 있기 때문에 기계를 분해하지 않고는 내부를 직접 볼 수 없다. 대신 사람은 기계의 외부에 부착된 버튼을 이용해서 기계와 상호작용할 수 있다. 버튼을 누르면 객체의 상태를 변경할 수 있지만 변경된 상태를 직접 눈으로 볼 수는 없다. 대신 원하는 시점에 다른 버튼을 통해 객체의 상태를 조회할 수 있다.  
사용자가 객체 기계의 버튼을 눌러 상태를 변경하거나 상태 조회를 요청하는 것은 객체의 행동을 유발하기 위해 메시지를 전송하는 것과 유사하다. 버튼을 누르는 것은 기계의 사용자지만 눌린 버튼에 따라 어떤 방식으로 동작할지는 기계 스스로 결정한다. 이것은 전달된 메시지에 따라 스스로 판단하고 결정하는 자율적인 객체의 특정을 정확하게 묘사한다.  
여기서 중요한 점은 객체에 접근할 수 있는 유일한 방법은 객체가 제공하는 행동 뿐이라는 것이다. 즉 사용자가 객체가 제공하는 명령 버튼과 쿼리 버튼으로 구성된 인터페이스를 통해서만 객체에 접근할 수 있다. 객체 기계가 제공하는 버튼을 통해서만 상태에 접근할 수 있다는 것은 객체의 **캡슐화**를 강조한다.  
기계 은유를 이용하면 객체의 식별자를 효과적으로 설명할 수 있다. 두 개의 객체 기계가 동일한 상태와 동일한 행동을 제공한다고 해도 두 기계를 구분된 별개의 객체로 인식하기 때문에 객체가 상태와 무관하게 구분 가능한 식별자를 가진다는 것을 의미한다.  
객체 간의 메시지를 통한 협력 역시 기계 은유를 사용하면 직관적으로 이해할 수 있다. 한 기계에 버튼을 눌렀다고 가정할 때 해당 기계는 내부적인 처리를 완료한 후 링크를 통해 연결된 다른 기계에 특정 버튼이 눌러지도록 요청을 전송한다. 이는 객체지향 패러다임 관점에서 메시지를 수신한 한 객체가 메시지를 처리하던 도중 다른 객체에게 메시지를 보내 처리를 요청하는 것과 동일하다. 즉, 링크를 통해 연결된 두 객체가 메시지 전송을 통해 협력하고 있는 것이다.

---

### 6/28(화)

객체지향의 사실과 오해 - 2. 이상한 나라의 객체  
행동이 상태를 결정한다

객체지향에 갓 입문한 사람들이 가장 쉽게 빠지는 함정은 상태를 중심으로 객체를 바라보는 것이다. 상태를 먼저 결정하고 행동을 나중에 결정하는 방법은 설계에 나쁜 영향을 끼친다.  
첫째, 상태를 먼저 결정할 경우 캡슐화가 저해된다. 상태에 초점을 맞출 경우 상태가 객체 내부로 깔끔하게 캡슐화되지 못하고 공용 인터페이스에 그대로 노출될 확률이 높아진다.  
둘째, 객체를 협력자가 아닌 고립된 섬으로 만든다. 객체가 필요한 이유는 애플리케이션의 문맥 내에서 다른 객체와 협력하기 위해서다. 상태를 먼저 고려하는 방식은 협력이라는 문맥에서 멀리 벗어난 채 객체를 설계한다.  
셋째, 객체의 재사용성이 저하된다. 객체의 재사용성은 다양한 협력에 참여할 수 있는 능력에서 나온다. 상태에 초점을 맞춘 객체는 다양한 협력에 참여하기 어렵기 때문에 재사용성이 저하될 수밖에 없다.  
협력에 참여하는 휼륭한 객체 시민을 양성하기 위한 가장 중요한 덕목은 상태가 아니라 **행동**에 초점을 맞추는 것이다. 객체는 다른 객체와 협력하기 위해 존재한다. 객체의 행동은 객체가 협력하는 유일한 방법이다. 따라서 객체가 적합한지를 결정하는 것은 그 객체의 상태가 아니라 행동이다. 애플리케이션 안에서 어떤 행동을 원하느냐가 어떤 객체가 적합한지를 결정한다.  
**객체지향 설계는 애플리케이션에 필요한 협력을 생각하고 협력에 참여하는 데 필요한 행동을 생각한 후 행동을 수행할 객체를 선택하는 방식으로 수행된다.** 행동을 결정한 후 해동에 필요한 정보가 무엇인지를 고려하게 되며 이 과정에서 필요한 상태가 결정된다. => 행동을 먼저 결정하고, 그 후에 행동에 적절한 상태를 선택한다.  
협력 안에서 객체의 행동은 객체가 협력에 참여하면서 완수해야 하는 책임을 의미한다. **책임-주도 설계(Responsibility-Driven Design, RDD)**는 협력이라는 문맥 안에서 객체의 행동을 생각하도록 도움으로써 응집도 높고 재사용 가능한 객체를 만들 수 있게 한다.

**행동이 상태를 결정한다.**

---

### 6/29(수)

객체지향의 사실과 오해 - 2. 이상한 나라의 객체  
은유와 객체

객체지향이란 현실 세계의 모방이다.  
객체지향을 현실 세계의 모방이라고 보는 관점은 객체지향 분석/설계란 현실 세계에 존재하는 다양한 객체를 모방한 후 필요한 부분만 취해 소프트웨어 객체로 구현하는 과정이라고 설명한다. 흔히 객체지향을 현실 세계의 추상화라고도 하는데, 그 안에는 현실 세계를 모방해서 단순화한다는 의미가 숨어 있다. 여기서 **추상화(abstraction)**란 실제의 사물에서 자신이 원하는 특징만 취하고 필요 없는 부분을 추려 핵심만 표현하는 행위를 말한다.  
그러나 객체지향 세계는 현실 세계의 단순한 모방이 아니다. 모방과 추상화라는 개념으로는 현실 객체와 소프트웨어 객체 사이의 관계를 깔끔하게 설명하지 못한다.

[의인화]
현실 속의 객체와 소프트웨어 객체 사이의 가장 큰 차이점은 현실 속에서 수동적인 존재가 소프트웨어 세계로 구현될 때 능동적으로 변한다는 것이다.
소프트웨어 객체는 현실 객체의 부분적인 특징을 모방하는 것이 아니라 현실 객체가 가지지 못한 추가적인 능력을 보유하게 된다. 레베카 워프스브록은 이러한 특징을 **의인화(anthropomorphism)**이라고 부른다.

> 객체는 무생물이거나 심지어는 실세계의 개념적인 개체로 모델링될 수 있지만, 그것들은 마치 우리가 현실 세계에서 에이전트로 행동하는 것처럼 시스템 안에서 에이전트로 행동한다. 객체가 현실 세계의 대상보다 더 많이 안다는 것이 모순처럼 보일 수 있다. 결국, 인간이라는 에이전트 없이 현실의 전화는 서로에게 전화를 걸지 않으며 색은 스스로 칠하지 않는다. 일살적인 체계에서는 어떤 사건이 일어나기 위해 반드시 인간 에이전트가 필요한 반면 객체들은 그들 자신의 체계 안에서 [능동적이고 자율적인] 에이전트다.  
> 의인화의 관점에서 스프트웨어를 생물로 생각하자. 모든 생물처럼 소프트웨어는 태어나고, 삶을 영위하고, 그리고 죽는다. [Wirfs-Brock, 1990]

소프트웨어 안에 구축되는 객체지향 세계는 현실을 모방한 것이 아니다. 현실의 모습을 조금 참고할 뿐 궁극적인 목적은 현실과 전혀 다른 새로운 세계를 창조하는 것이다.

[은유]  
객체지향 분석/설계에 대한 전통적인 조언은 현실 세계의 객체를 자세히 관찰하고 그중에서 소프트웨어 객체에 적합한 속성만 추려내라는 것이다. 오히려 이 조언은 애플리케이션이 현실의 구조를 정확하게 반영해야 한다는 오해만 심어줄 뿐이다.  
객체지향의 세계와 현실 세계 사이는 전혀 상관없는 것은 아니다. 단지 모방이나 추상화의 수준이 아닌 다른 관점에서 유사성을 가지고 있을 뿐이다. 현실 세계와 객체지향 세계 둘 사이를 좀 더 정확하게 설명할 수 있는 단어는 **은유(metaphor)**다.  
은유란 실제로는 적용되지 않는 한 가지 개념을 이용해 다른 개념을 서술하는 대화의 형태다. 은유의 본질은 한 종류의 사물을 다른 종류의 사물 관점에서 이해하고 경혐하는 데 있다. 현실 속의 객체의 의미 일부가 소프트웨어 객체로 전달되기 때문에 프로그램 내의 객체는 현실 속 객체에 대한 은유다.  
은유는 **표현적 차이(representational gap)** 또는 **의미적 차이(semantic gap)**라는 논점과 관련성이 깊다. 여기서 차이란 소프트웨어에 대해 사람들이 생각하는 모습과 실제 소프트웨어 표현 사이의 차이를 의미한다. 은유 관계에 있는 실제 객체의 이름을 소프트웨어 객체의 이름으로 사용하면 표현적 차이를 줄여 소프트웨어의 구조를 쉽게 이해할 수 있다. 모든 객체지향 지침서에는 **현실 세계인 도메인에서 사용되는 이름을 객체에게 부여**하라고 가이드하는 것이다.

**객체지향 설계자로서 우리의 목적은 현실을 모방하는 것이 아니다. 단지 이상한 나라를 창조하기만 하면 된다. 현실을 닮아야 한다는 어떤 제약이나 구속도 없다. 여러분이 창조한 객체의 특성을 상기시킬 수 있다면 현실 속의 깨체의 이름을 이용해 객체를 묘사하라.**
