---
layout: post
title: "2022년 5월 TIL"
date: 2022-05-01 23:00:00 +0900
categories: 202205 TIL
---

### 5/1(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 프록시 패턴 2부<br/>
패턴 적용하기

```java
//GameService
public interface GameService {
    void startGame();
}
```

```java
//DefaultGameService
public class DefaultGameService implements GameService {
    @Override
    public void startGame() {
        System.out.println("이 자리에 오신 여러분을 진심으로 환영합니다.");
    }
}
```

```java
//GameServiceProxy
public class GameServiceProxy implements GameService {
    private GameService gameService;

    @Override
    public void startGame() {
        long before = System.currentTimeMillis();
        if (this.gameService == null) {
            this.gameService = new DefaultGameService();
        }

        gameService.startGame();
        System.out.println(System.currentTimeMillis() - before);
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        GameService gameService = new GameServiceProxy();
        gameService.startGame();
    }
}
```

---

### 5/2(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 프록시 패턴 3부<br/>
장점과 단점

-   장점
    -   기존 코드를 변경하지 않고 새로운 기능을 추가할 수 있다.
    -   기존 코드가 해야 하는 일만 유지할 수 있다.
    -   기능 추가 및 초기화 지연 등으로 다양하게 활용할 수 있다.
-   단점
    -   코드의 복잡도가 증가한다.

---

### 5/3(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 프록시 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바
    -   다이나믹 프록시, java.lang.reflect.Proxy
-   스프링
    -   스프링 AOP

---

### 5/4(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 책임 연쇄 패턴 1부<br/>
패턴 소개

**책임 연쇄(Chain-of-Responsibility) 패턴: 요청을 보내는 쪽(sender)과 요청을 처리하는 쪽(receiver)을 분리하는 패턴<br/>
핸들러 체인을 사용해서 요청을 처리한다.**

---

### 5/5(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 책임 연쇄 패턴 2부<br/>
패턴 적용

```java
//RequestHandler
public abstract class RequestHandler {

    private RequestHandler nextHandler;

    public RequestHandler(RequestHandler nextHandler) {
        this.nextHandler = nextHandler;
    }

    public void handle(Request request) {
        if (nextHandler != null) {
            nextHandler.handle(request);
        }
    }
}
```

```java
//PrintRequestHandler
public class PrintRequestHandler extends RequestHandler {

    public PrintRequestHandler(RequestHandler nextHandler) {
        super(nextHandler);
    }

    @Override
    public void handle(Request request) {
        System.out.println(request.getBody());
        super.handle(request);
    }
}
```

```java
//AuthRequestHandler
public class AuthRequestHandler extends RequestHandler {

    public AuthRequestHandler(RequestHandler nextHandler) {
        super(nextHandler);
    }

    @Override
    public void handle(Request request) {
        System.out.println("인증이 되었는가?");
        super.handle(request);
    }
}
```

```java
//LoggingRequestHandler
public class LoggingRequestHandler extends RequestHandler {

    public LoggingRequestHandler(RequestHandler nextHandler) {
        super(nextHandler);
    }

    @Override
    public void handle(Request request) {
        System.out.println("로깅");
        super.handle(request);
    }
}
```

```java
//Client
public class Client {

    private RequestHandler requestHandler;

    public Client(RequestHandler requestHandler) {
        this.requestHandler = requestHandler;
    }

    public void doWork() {
        Request request = new Request("이번 놀이는 뽑기입니다.");
        requestHandler.handle(request);
    }

    public static void main(String[] args) {
        RequestHandler chain = new AuthRequestHandler(new LoggingRequestHandler(new PrintRequestHandler(null)));
        Client client = new Client(chain);
        client.doWork();
    }
}
```

---

### 5/6(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 책임 연쇄 패턴 3부<br/>
장점과 단점

-   장점
    -   클라이언트 코드를 변경하지 않고 새로운 핸들러를 체인에 추가할 수 있다.
    -   각각의 체인은 자신이 해야하는 일만 한다.
    -   체인을 다양한 방법으로 구성할 수 있다.
-   단점
    -   디버깅이 조금 어렵다.
