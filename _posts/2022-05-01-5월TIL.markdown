---
layout: post
title: "2022년 5월 TIL"
date: 2022-05-01 23:00:00 +0900
categories: 202205 TIL
---

### 5/1(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 프록시 패턴 2부<br/>
패턴 적용하기

```java
//GameService
public interface GameService {
    void startGame();
}
```

```java
//DefaultGameService
public class DefaultGameService implements GameService {
    @Override
    public void startGame() {
        System.out.println("이 자리에 오신 여러분을 진심으로 환영합니다.");
    }
}
```

```java
//GameServiceProxy
public class GameServiceProxy implements GameService {
    private GameService gameService;

    @Override
    public void startGame() {
        long before = System.currentTimeMillis();
        if (this.gameService == null) {
            this.gameService = new DefaultGameService();
        }

        gameService.startGame();
        System.out.println(System.currentTimeMillis() - before);
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        GameService gameService = new GameServiceProxy();
        gameService.startGame();
    }
}
```

---

### 5/2(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 프록시 패턴 3부<br/>
장점과 단점

-   장점
    -   기존 코드를 변경하지 않고 새로운 기능을 추가할 수 있다.
    -   기존 코드가 해야 하는 일만 유지할 수 있다.
    -   기능 추가 및 초기화 지연 등으로 다양하게 활용할 수 있다.
-   단점
    -   코드의 복잡도가 증가한다.

---

### 5/3(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 프록시 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바
    -   다이나믹 프록시, java.lang.reflect.Proxy
-   스프링
    -   스프링 AOP

---

### 5/4(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 책임 연쇄 패턴 1부<br/>
패턴 소개

**책임 연쇄(Chain-of-Responsibility) 패턴: 요청을 보내는 쪽(sender)과 요청을 처리하는 쪽(receiver)을 분리하는 패턴<br/>
핸들러 체인을 사용해서 요청을 처리한다.**

---

### 5/5(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 책임 연쇄 패턴 2부<br/>
패턴 적용

```java
//RequestHandler
public abstract class RequestHandler {

    private RequestHandler nextHandler;

    public RequestHandler(RequestHandler nextHandler) {
        this.nextHandler = nextHandler;
    }

    public void handle(Request request) {
        if (nextHandler != null) {
            nextHandler.handle(request);
        }
    }
}
```

```java
//PrintRequestHandler
public class PrintRequestHandler extends RequestHandler {

    public PrintRequestHandler(RequestHandler nextHandler) {
        super(nextHandler);
    }

    @Override
    public void handle(Request request) {
        System.out.println(request.getBody());
        super.handle(request);
    }
}
```

```java
//AuthRequestHandler
public class AuthRequestHandler extends RequestHandler {

    public AuthRequestHandler(RequestHandler nextHandler) {
        super(nextHandler);
    }

    @Override
    public void handle(Request request) {
        System.out.println("인증이 되었는가?");
        super.handle(request);
    }
}
```

```java
//LoggingRequestHandler
public class LoggingRequestHandler extends RequestHandler {

    public LoggingRequestHandler(RequestHandler nextHandler) {
        super(nextHandler);
    }

    @Override
    public void handle(Request request) {
        System.out.println("로깅");
        super.handle(request);
    }
}
```

```java
//Client
public class Client {

    private RequestHandler requestHandler;

    public Client(RequestHandler requestHandler) {
        this.requestHandler = requestHandler;
    }

    public void doWork() {
        Request request = new Request("이번 놀이는 뽑기입니다.");
        requestHandler.handle(request);
    }

    public static void main(String[] args) {
        RequestHandler chain = new AuthRequestHandler(new LoggingRequestHandler(new PrintRequestHandler(null)));
        Client client = new Client(chain);
        client.doWork();
    }
}
```

---

### 5/6(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 책임 연쇄 패턴 3부<br/>
장점과 단점

-   장점
    -   클라이언트 코드를 변경하지 않고 새로운 핸들러를 체인에 추가할 수 있다.
    -   각각의 체인은 자신이 해야하는 일만 한다.
    -   체인을 다양한 방법으로 구성할 수 있다.
-   단점
    -   디버깅이 조금 어렵다.

---

### 5/7(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 책임 연쇄 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바
    -   서블릿 필터
-   스프링
    -   스프링 시큐리티 필터

---

### 5/8(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 커맨드 패턴 1부<br/>
패턴 소개

**커맨드(Command) 패턴: 요청을 캡슐화하여 호출자(invoker)와 수신자(receiver)를 분리하는 패턴<br/>
요청을 처리하는 방법이 바뀌더라도, 호출자의 코드는 변경되지 않는다.**

---

### 5/9(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 커맨드 패턴 2부<br/>
패턴 적용하기

```java
//Command
public interface Command {
    void execute();
    void undo();
}
```

```java
//Button
public class Button {
    private Stack<Command> commands = new Stack<>();

    public void press(Command command) {
        command.execute();
        commands.push(command);
    }

    public void undo() {
        if (!commands.isEmpty()) {
            Command command = commands.pop();
            command.undo();
        }
    }

    public static void main(String[] args) {
        Button button = new Button();
        button.press(new GameStartCommand(new Game()));
        button.press(new LightOnCommand(new Light()));
        button.undo();
        button.undo();
    }
}
```

```java
//LightOnCommand
public class LightOnCommand implements Command {
    private Light light;

    public LightOnCommand(Light light) {
        this.light = light;
    }

    @Override
    public void execute() {
        light.on();
    }

    @Override
    public void undo() {
        new LightOffCommand(this.light).execute();
    }
}
```

```java
//LightOffCommand
public class LightOffCommand implements Command {
    private Light light;

    public LightOffCommand(Light light) {
        this.light = light;
    }

    @Override
    public void execute() {
        light.off();
    }

    @Override
    public void undo() {
        new LightOnCommand(this.light).execute();
    }
}
```

```java
//Game
public class Game {
    private boolean isStarted;

    public void start() {
        System.out.println("게임을 시작합니다.");
        this.isStarted = true;
    }

    public void end() {
        System.out.println("게임을 종료합니다.");
        this.isStarted = false;
    }

    public boolean isStarted() {
        return isStarted;
    }
}
```

```java
//GameStartCommand
public class GameStartCommand implements Command {
    private Game game;

    public GameStartCommand(Game game) {
        this.game = game;
    }

    @Override
    public void execute() {
        game.start();
    }

    @Override
    public void undo() {
        new GameEndCommand(this.game).execute();
    }
}

```

```java
//GameEndCommand
public class GameEndCommand implements Command {
    private Game game;

    public GameEndCommand(Game game) {
        this.game = game;
    }

    @Override
    public void execute() {
        game.end();
    }

    @Override
    public void undo() {
        new GameStartCommand(this.game).execute();
    }
}
```

```java
//MyApp
public class MyApp {
    private Command command;

    public MyApp(Command command) {
        this.command = command;
    }

    public void press() {
        command.execute();
    }

    public static void main(String[] args) {
        MyApp myApp = new MyApp(new GameStartCommand(new Game()));
    }
}
```

---

### 5/10(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 커맨드 패턴 3부<br/>
장점과 단점

-   장점
    -   기존 코드를 변경하지 않고 새로운 커맨드를 만들 수 있다.
    -   수신자의 코드가 변경되어도 호출자의 코드는 변경되지 않는다.
    -   커맨드 객체를 로깅, DB에 저장, 네트워크로 전송하는 등 다양한 방법으로 활용할 수 있다.
-   단점
    -   코드가 복잡하고 클래스가 많아진다.

---

### 5/11(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 커맨드 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바
    -   Runnable
    -   람다
    -   메소드 레퍼런스
-   스프링
    -   SimpleJdbcInsert
    -   SimpleJdbcCall

---

### 5/12(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 인터프리터 패턴 1부<br/>
패턴 소개

**인터프리터(Interpreter) 패턴: 자주 등장하는 문제를 간단한 언어로 정의하고 재사용하는 패턴<br/>
반복되는 문제 패턴을 언어 또는 문법으로 정의하고 확장할 수 있다.**

예시: 정규표현식

---

### 5/13(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 인터프리터 패턴 2부<br/>
패턴 적용하기

```java
//PostfixExpression
public interface PostfixExpression {
    int interpret(Map<Character, Integer> context);
}
```

```java
//VariableExpression
public class VariableExpression implements PostfixExpression {
    private Character character;

    public VariableExpression(Character character) {
        this.character = character;
    }

    @Override
    public int interpret(Map<Character, Integer> context) {
        return context.get(this.character);
    }
}
```

```java
//PlusExpression
public class PlusExpression implements PostfixExpression {
    private PostfixExpression left;
    private PostfixExpression right;

    public PlusExpression(PostfixExpression left, PostfixExpression right) {
        this.left = left;
        this.right = right;
    }

    @Override
    public int interpret(Map<Character, Integer> context) {
        return left.interpret(context) + right.interpret(context);
    }
}
```

```java
//MinusExpression
public class MinusExpression implements PostfixExpression {
    private PostfixExpression left;
    private PostfixExpression right;

    public MinusExpression(PostfixExpression left, PostfixExpression right) {
        this.left = left;
        this.right = right;
    }

    @Override
    public int interpret(Map<Character, Integer> context) {
        return left.interpret(context) - right.interpret(context);
    }
}
```

```java
//PostfixParser
public class PostfixParser {
    public static PostfixExpression parse(String expression) {
        Stack<PostfixExpression> stack = new Stack<>();
        for (char c : expression.toCharArray()) {
            stack.push(getExpression(c, stack));
        }
        return stack.pop();
    }

    private static PostfixExpression getExpression(char c, Stack<PostfixExpression> stack) {
        switch (c) {
            case '+':
                return new PlusExpression(stack.pop(), stack.pop());
            case '-':
                PostfixExpression right = stack.pop();
                PostfixExpression left = stack.pop();
                return new MinusExpression(left, right);
            default:
                return new VariableExpression(c);
        }
    }
}
```

```java
//App
public class App {
    public static void main(String[] args) {
        PostfixExpression expression = PostfixParser.parse("xyz+-a+");
        int result = expression.interpret(Map.of('x', 1, 'y', 2, 'z', 3, 'a', 4));
        System.out.println(result);
    }
}
```

간소화 버전(MinusExpression, PlusExpression, VariableExpression 필요 없음)

```java
//PostfixExpression
public interface PostfixExpression {
    int interpret(Map<Character, Integer> context);

    static PostfixExpression plus(PostfixExpression left, PostfixExpression right) {
        return context -> left.interpret(context) + right.interpret(context);
    }

    static PostfixExpression minus(PostfixExpression left, PostfixExpression right) {
        return context -> left.interpret(context) - right.interpret(context);
    }

    static PostfixExpression variable(Character c) {
        return context -> context.get(c);
    }
}
```

```java
//PostfixParse
public class PostfixParser {
    public static PostfixExpression parse(String expression) {
        Stack<PostfixExpression> stack = new Stack<>();
        for (char c : expression.toCharArray()) {
            stack.push(getExpression(c, stack));
        }
        return stack.pop();
    }

    private static PostfixExpression getExpression(char c, Stack<PostfixExpression> stack) {
        switch (c) {
            case '+':
                return PostfixExpression.plus(stack.pop(), stack.pop());
            case '-':
                PostfixExpression right = stack.pop();
                PostfixExpression left = stack.pop();
                return PostfixExpression.minus(left, right);
            default:
                return PostfixExpression.variable(c);
        }
    }
}
```

---

### 5/14(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 인터프리터 패턴 3부<br/>
장점과 단점

-   장점
    -   자주 등장하는 문제 패턴을 언어와 문법으로 정의할 수 있다.
    -   기존 코드를 변경하지 않고 새로운 Expression을 추가할 수 있다.(Parser는 추가해야됨)
-   단점
    -   복잡한 문법을 표현하려면 Expression과 Parser가 복잡해진다.

---

### 5/15(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 인터프리터 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바
    -   자바 컴파일러
    -   정규 표현식
-   스프링
    -   SpEL(스프링 Expression Language)

---

### 5/16(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 이터레이터 패턴 1부<br/>
패턴 소개

**이터레이터(Iterator) 패턴: 집합 객체 내부 구조를 노출시키지 않고 순회하는 방법을 제공하는 패턴<br/>
집합 객체를 순회하는 클라이언트 코드를 변경하지 않고 다양한 순회 방법을 제공할 수 있다.**

---

### 5/17(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 이터레이터 패턴 2부<br/>
패턴 적용하기

```java
//Post
public class Post {
    private String title;
    private LocalDateTime createdDateTime;

    public Post(String title) {
        this.title = title;
        this.createdDateTime = LocalDateTime.now();
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public LocalDateTime getCreatedDateTime() {
        return createdDateTime;
    }

    public void setCreatedDateTime(LocalDateTime createdDateTime) {
        this.createdDateTime = createdDateTime;
    }
}
```

```java
//RecentPostIterator
public class RecentPostIterator implements Iterator<Post> {
    private Iterator<Post> internalIterator;

    public RecentPostIterator(List<Post> posts) {
        Collections.sort(posts, (p1, p2) -> p2.getCreatedDateTime().compareTo(p1.getCreatedDateTime()));
        this.internalIterator = posts.iterator();
    }

    @Override
    public boolean hasNext() {
        return this.internalIterator.hasNext();
    }

    @Override
    public Post next() {
        return this.internalIterator.next();
    }
}
```

```java
//Board
public class Board {
    List<Post> posts = new ArrayList<>();

    public List<Post> getPosts() {
        return posts;
    }

    public void addPost(String content) {
        this.posts.add(new Post(content));
    }

    public Iterator<Post> getRecentPostIterator() {
        return new RecentPostIterator(this.posts);
    }
}
```

```java
//Client
public class Client {
    public static void main(String[] args) {
        Board board = new Board();
        board.addPost("디자인 패턴 게임");
        board.addPost("선생님, 저랑 디자인 패턴 하나 학습하시겠습니까?");
        board.addPost("지금 이 자리에 계신 여러분들은 모두 디자인 패턴을 학습하고 계신 분들입니다.");

        // 들어간 순서대로 순회하기
        List<Post> posts = board.getPosts();
        Iterator<Post> iterator = posts.iterator();
        System.out.println(iterator.getClass());

        for (int i = 0 ; i < posts.size() ; i++) {
            Post post = posts.get(i);
            System.out.println(post.getTitle());
        }

        // 가장 최신 글 먼저 순회하기
        Iterator<Post> recentPostIterator = board.getRecentPostIterator();
        while(recentPostIterator.hasNext()) {
            System.out.println(recentPostIterator.next().getTitle());
        }
    }
}
```

---

### 5/18(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 이터레이터 패턴 3부<br/>
장점과 단점

-   장점
    -   집합 객체가 가지고 있는 객체들에 손쉽게 접근할 수 있다.
    -   일관된 인터페이스를 사용해 여러 형태의 집합 구조를 순회할 수 있다.
-   단점
    -   클래스가 늘어나고 복잡도가 증가한다.

---

### 5/19(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 이터레이터 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바
    -   java.util.Enumeration과 java.util.Iterator
    -   Java StAX(Streaming API for XML)의 Iterator 기반 API
        -   XmlEventReader, XmlEventWriter
-   스프링
    -   CompositeIterator

---

### 5/20(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 중재자 패턴 1부<br/>
패턴 소개

**중재자(Mediator) 패턴: 여러 객체들이 소통하는 방법을 캡슐화하는 패턴<br/>
여러 컴포넌트간의 결합도를 중재자를 통해 낮출 수 있다.**

---

### 5/21(토)

코딩으로 학습하는 GoF의 디자인 패턴 - 중재자 패턴 2부<br/>
패턴 적용하기

```java
//FontDesk(Mediator)
public class FrontDesk {
    private CleaningService cleaningService = new CleaningService();

    private Restaurant restaurant = new Restaurant();

    public void getTowers(Guest guest, int numberOfTowers) {
        cleaningService.getTowers(guest.getId(), numberOfTowers);
    }

    public String getRoomNumberFor(Integer guestId) {
        return "1111";
    }

    public void dinner(Guest guest, LocalDateTime dateTime) {
        restaurant.dinner(guest.getId(), dateTime);
    }
}
```

```java
//Guest
public class Guest {
    private Integer id;

    private FrontDesk frontDesk = new FrontDesk();

    public void getTowers(int numberOfTowers) {
        this.frontDesk.getTowers(this, numberOfTowers);
    }

    private void dinner(LocalDateTime dateTime) {
        this.frontDesk.dinner(this, dateTime);
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }
}
```

```java
//CleaningService(Colleague)
public class CleaningService {
    private FrontDesk frontDesk = new FrontDesk();

    public void getTowers(Integer guestId, int numberOfTowers) {
        String roomNumber = this.frontDesk.getRoomNumberFor(guestId);
        System.out.println("provide " + numberOfTowers + " to " + roomNumber);
    }
}
```

```java
//Restaurant(Colleague)
public class Restaurant {
    public void dinner(Integer id, LocalDateTime dateTime) {

    }
}
```

---

### 5/22(일)

코딩으로 학습하는 GoF의 디자인 패턴 - 중재자 패턴 3부<br/>
장점과 단점

-   장점
    -   컴포넌트 코드를 변경하지 않고 새로운 중재자를 만들어 사용할 수 있다.
    -   각각의 컴포넌트 코드를 보다 간결하게 유지할 수 있다.
-   단점
    -   중재자 역할을 하는 클래스의 복잡도와 결합도가 증가한다.

---

### 5/23(월)

코딩으로 학습하는 GoF의 디자인 패턴 - 중재자 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바
    -   ExecutorService
    -   Executor
-   스프링
    -   DispatcherServlet

---

### 5/24(화)

코딩으로 학습하는 GoF의 디자인 패턴 - 메멘토 패턴 1부<br/>
패턴 소개

**메멘토(Memento) 패턴: 캡슐화를 유지하면서 객체 내부 상태를 외부에 저장하는 방법<br/>
객체 상태를 외부에 저장했다가 해당 상태로 다시 복구할 수 있다..**

---

### 5/25(수)

코딩으로 학습하는 GoF의 디자인 패턴 - 메멘토 패턴 2부<br/>
패턴 적용하기

```java
//GameSave(immutable해야 함 -> final 사용)
public final class GameSave {
    private final int blueTeamScore;
    private final int redTeamScore;

    public GameSave(int blueTeamScore, int redTeamScore) {
        this.blueTeamScore = blueTeamScore;
        this.redTeamScore = redTeamScore;
    }

    public int getBlueTeamScore() {
        return blueTeamScore;
    }

    public int getRedTeamScore() {
        return redTeamScore;
    }
}
```

```java
//Game
public class Game {
    private int redTeamScore;
    private int blueTeamScore;

    public int getRedTeamScore() {
        return redTeamScore;
    }

    public void setRedTeamScore(int redTeamScore) {
        this.redTeamScore = redTeamScore;
    }

    public int getBlueTeamScore() {
        return blueTeamScore;
    }

    public void setBlueTeamScore(int blueTeamScore) {
        this.blueTeamScore = blueTeamScore;
    }

    public GameSave save() {
        return new GameSave(this.blueTeamScore, this.redTeamScore);
    }

    public void restore(GameSave gameSave) {
        this.blueTeamScore = gameSave.getBlueTeamScore();
        this.redTeamScore = gameSave.getRedTeamScore();
    }
}

```

```java
//Client
public class Client {
    public static void main(String[] args) {
        Game game = new Game();
        game.setBlueTeamScore(10);
        game.setRedTeamScore(20);

        GameSave save = game.save();

        game.setBlueTeamScore(12);
        game.setRedTeamScore(22);

        game.restore(save);

        System.out.println(game.getBlueTeamScore());
        System.out.println(game.getRedTeamScore());
    }
}
```

---

### 5/26(목)

코딩으로 학습하는 GoF의 디자인 패턴 - 메멘토 패턴 3부<br/>
장점과 단점

-   장점
    -   캡슐화를 지키면서 상태 객체 상태 스냅샷을 만들 수 있다.
    -   객체 상태를 저장하고 또는 복원하는 역할을 CareTaker에게 위임할 수 있다.
    -   객체 상태가 바뀌어도 클라이언트 코드를 변경되지 않는다.
-   단점
    -   많은 정보를 저장하는 Mementor를 자주 생성하는 경우 메모리 사용량에 많은 영향을 줄 수 있다.

---

### 5/27(금)

코딩으로 학습하는 GoF의 디자인 패턴 - 메멘토 패턴 4부<br/>
자바와 스프링에서 찾아보는 패턴

-   자바
    -   객체 직렬화, java.io.Serializable
    -   java.util.Date
