---
layout: post
title: "2022년 7월 TIL"
date: 2022-07-01 00:05:00 +0900
categories: 202207 TIL
---

### 7/1(금)

객체지향의 사실과 오해 - 3. 타입과 추상화  
객체지향과 추상화

[그룹으로 나누어 단순화하기]  
앨리스의 이야기에 등장하는 정원사, 병사, 신하, 왕자와 공주 등 각 인물들에게는 다양한 측면에서 서로를 구별할 수 있는 독특한 특징이 있다. 명확한 경계를 가지고 서로 구별할 수 있는 구체적인 사람이나 사물을 객체지향 패러다임에서는 **객체**라고 한다.  
앨리스의 이야기에 등장하는 정원사, 병사, 신하, 왕자와 공주 모두를 '트럼프'라고 줄여 부르기로 하자. 다양한 인물을 '트럼프'라는 한 단어로 줄여 지칭할 수 있는 이유는 해당 인물들이 공통적으로 '트럼프'라고 했을 때 떠오르는 일반적인 외형과 행동 방식을 가지고 있기 때문이다.

[개념]  
앨리스가 인물들의 차이점을 무시하고 공통점만 취해 트럼프라는 개념으로 단순화한 것은 추상화의 일종이다. 객체지향 패러다임의 중심에는 구체적이고 실제적인 객체가 존재하지만 수많은 객체들을 개별적인 단위로 취급하기에는 인간이 지닌 인지능력은 턱없이 부족하다. 따라서 사람들은 본능적으로 공통적인 특성을 기준으로 객체를 여러 그룹으로 묶어 동시에 다뤄야 하는 가짓수를 줄임으로써 상황을 단순화하려고 노력한다.  
이처럼 공통점을 기반으로 객체를 묶기 위한 그릇을 **개념(concept)**이라고 한다. 개념이란 일반적으로 우리가 인식하고 있는 아이디어나 관념을 뜻한다.  
개념을 이용하면 객체를 여러 그룹으로 **분류(classification)**할 수 있다. 개념은 공통점을 기반으로 객체를 분류할 수 있는 일종의 체라고 할 수 있다.  
각 객체는 특정한 개념을 표현하는 그룹의 일원으로 포함된다. 객체에 어떤 개념을 적용하는 것이 가능해서 개념 그룹의 일원이 될 때 객체를 그 개념의 **인스턴스(instance)**라고 한다.

> 객체란?  
> 특정한 개념을 적용할 수 있는 구체적인 사물을 의미한다. 개념이 객체에 적용됐을 때 객체를 개념의 인스턴스라고 한다.

개념은 세상의 객체들을 거르는 데 사용하는 정신적인 렌즈를 제공한다. 이 렌즈를 통해 세상을 바라보면 수백 수천 개의 다양한 객체가 존재하는 복잡한 세상을 몇 개의 개념만으로 단순화할 수 있다. 개념은 객체를 분류할 수 있는 특을 제공하고, 주변의 복잡한 객체들은 단지 몇 가지 개념의 인스턴스일 뿐이다.

---

### 7/2(토)

객체지향의 사실과 오해 - 3. 타입과 추상화  
객체지향과 추상화

[개념의 세 가지 관점]  
개념은 특정한 객체가 어떤 그룹에 속할 것인지를 결정한다. 어떤 객체에 어떤 개념이 적용됐다고 할 때는 그 개념이 부가하는 의미를 만족시킴으로써 다른 객체와 함께 해당 개념의 일원이 됐다는 것을 의미한다.  
일반적으로 객체의 분류 장치로서 개념을 이야기할 때는 아래의 세 가지 관점을 함께 언급한다.

-   **심볼(symbol)**: 개념을 가리키는 간략한 이름이나 명칭
-   **내연(intension)**: 개념의 완전한 정의를 나타내며 내연의 의미를 이용해 객체가 개념에 속하는지 여부를 확인할 수 있다.
-   **외연(extension)**: 개념에 속하는 모든 객체의 집합(set)

심볼이란 개념을 가리키는 이름이다. 앨리스 이야기에서 개념을 지칭하는 데 사용하는 '트럼프'라는 이름은 개념의 심볼이 된다.  
내연이란 개념의 의미를 나타낸다. 앨리스 이야기에서 몸이 납작하고 두 손과 두 발이 네모난 몸 모서리에 달려 있다는 트럼프에 대한 설명이 바로 내연이다. 내연은 개념을 객체에게 적용할 수 있는지 여부를 판단하기 위한 조건이다.  
외연은 개념에 속하는 객체들, 즉 개념의 인스턴스들이 모여 이뤄진 집합을 가리킨다. 앨리스의 이야기에서 정원사, 병사, 신하, 왕자와 공주 등은 모두 트럼프의 외연을 구성하는 객체 집합에 속한다.  
트럼프 개념의 심볼, 내연, 외연

-   심볼: 트럼프
-   내연: 몸이 납작하고 두 손과 두 발은 네모 귀퉁이에 달려 있는 등장인물
-   외연: 정원사, 병사, 신하, 왕자와 공주, 하객으로 참석한 왕과 왕비들, 하트 잭, 하트 왕과 하트 여왕

개념을 구성하는 심볼, 내연, 외연은 객체의 분류 방식에 대한 지침을 제공한다. 그러나 개념이 심볼, 내연, 외연으로 구성돼 있다는 사실보다는 개념을 이용해 객체를 분류할 수 있다는 사실이 더 중요하다. 개념을 이용해 공통점을 가진 객체들을 분류할 수 있다는 아이디어는 객체지향 패러다임이 복잡성을 극복하는 데 사용하는 가장 기본적인 인지 수단이기 때문이다.

객체지향의 세계에서 가장 널리 알려진 유명인사가 클래스(class)라는 사실을 감안한다면 분류(classification)라는 개념이 얼마나 중요한지 실감할 수 있을 것이다.

---

### 7/3(일)

객체지향의 사실과 오해 - 3. 타입과 추상화  
객체지향과 추상화

[객체를 분류하기 위한 틀]  
외연의 관점에서 어떤 객체에 어떤 개념을 적용할 수 있다는 것은 동일한 개념으로 구성된 객체 집합에 해당 객체를 포함시킨다는 것을 의미한다. 어떤 객체와 마주했을 때 객체에게 적용할 개념을 결정하는 것은 결국 해당 객체를 개념이 적용된 객체 집합의 일원으로 맞아들인다는 것을 의미한다. 어떤 객체가 개념에 적합하지 않을 경우 해당 객체는 해당 개념의 객체 집합에 포함되지 않을 것이다.  
따라서 분류란 특정한 객체를 특정한 개념의 객체 집합에 포함시키거나 포함시키지 않는 작업을 의미한다.

> 분류란?
> 객체에 특정한 개념을 적용하는 작업이다. 객체에 특정한 개념을 적용하기로 결심하기로 결심했을 때 우리는 그 객체를 특정한 집합의 멤버로 분류하고 있는 것이다.

어떤 객체를 어떤 개념으로 분류할지가 객체지향의 품질을 결정한다. 객체를 적절한 개념에 따라 어떤 개념으로 분류할지가 객체지향의 품질을 결정한다. 객체는 소중하기 때문에 소중한 객체를 안전하고 적절한 장소에 보관할 수 있도록 개발자의 인지능력을 발휘해 최대한 직관적으로 분류해야 한다.

[분류는 추상화를 위한 도구다]  
앞에서 추상화는 두 가지 차원에서 이뤄진다고 했다. 추상화의 첫 번째 차원은 구체적인 사물 간의 공통점은 취하고 차이점은 버리는 **일반화**를 통해 단순화하는 것이다. 추상화의 두 번째 차원은 중요한 부분을 강조하기 위해 **불필요한 세부 사항을 제거**해 단순화하는 것이다. 개념을 통해 객체를 분류하는 과정은 추상화의 두 가지 차원을 모두 사용한다.  
앞에서 정원사, 병사, 신하, 왕자와 공주 등을 트럼프라는 개념으로 묶은 것은 개별 객체 간의 차이점은 무시하고 공통점을 취한 결과다. 이는 추상화의 첫 번째 차원인 일반화를 적용한 결과다.  
트럼프에 속하는 객체들의 공통점 중에서도 우리가 중요하다고 생각하는 특징은 몸이 납작하고 두 손과 두 발이 네모난 몸 모서리에 달려 있다는 것뿐이다. 그 외의 사항들은 무시되고 있다. 이는 추상화의 두 번째 차원에 따라 불필요한 세부 사항을 제거했다고 볼 수 있다.  
개념은 객체들의 복잡성을 극복하기 위한 추상화 도구다. 그리고 오늘을 살아가는 우리는 매 순간 세상에 존재하는 무수한 사물들을 개념의 틀로 걸러가며 세상을 추상화한다. 추상화를 사용함으로써 우리는 극도로 복잡한 세상을 제어 가능한 수준으로 단순화할 수 있다.

---

### 7/4(월)

객체지향의 사실과 오해 - 3. 타입과 추상화  
타입

[타입은 개념이다]  
개념이라는 단어 자체는 이미 우리의 일상생활에서 폭넓게 사용되는 일상적인 용어지만 컴퓨터 공학자들은 **타입(type)**이라는 단어를 사용해 좀 더 세련되게 표현한다. 타입과 개념의 정의는 완전히 동일하다. 타입은 공통점을 기반으로 객체들을 묶기 위한 틀이다. 타입은 개념과 마찬가지로 심볼, 내연, 외연을 이용해 서술할 수 있으며 타입에 속하는 객체 역시 타입의 인스턴스라고 한다.

> 타입은 개념과 동일하다. 따라서 타입이란 우리가 인식하고 있는 다양한 사물이나 객체에 적용할 수 있는 아이디어나 관념을 의미한다. 어떤 객체에 타입을 적용할 수 있을 때 그 객체를 타입의 인스턴스라고 한다. 타입의 인스턴스는 타입을 구성하는 외연인 객체 집합의 일원이 된다.

[데이터 타입]  
사람이 어떤 일을 수행하기 위해서는 장기 기억 속에 묻혀진 기억의 편린들을 단기 기억 속으로 불러들여야만 하는 것처럼 컴퓨터가 어떤 작업을 수행하기 위해서는 작업에 필요한 데이터를 메모리 안으로 불러들여야 한다. 메모리에 불러들여진 데이터들은 무수히 많은 0과 1로 치장되어 메모리에 저장된다.  
메모리를 들여다 보면 그 안에는 끝없이 펼쳐진 0과 1의 행렬만이 존재한다. 메모리의 세상에는 타입이라는 질서가 존재하지 않는다. 실제로 '타입이 없다(Untyped)'는 말은 메모리 안의 데이터를 다룰 수 있는 단 하나의 타입만이 존재한다는 것을 의미한다. 모든 데이터는 일련의 비트열(bit string)로 구성된다. 어떤 메모리 조각에 들어 있는 값의 의미는 그 값을 가져다 자신의 용도에 맞게 사용하는 외부의 해석가, 흔히 애플리케이션이라고 부르는 프로그램에 의해 결정된다.  
타입 없는 무질서가 초래한 혼돈의 세상에 사람들은 메모리 안의 데이터에 특정한 의미를 부여하기 시작했다. 다뤄야 하는 데이터의 용도와 행동에 따라 그것들을 분류했다. 어떤 데이터에 다른 데이터를 더하거나 빼거나 나누거나 곱할 수 있다면 그 데이터를 숫자형으로 분류했다. 데이터가 여러 문자로 구성돼 있고 다른 문자와 연결할 수 있다면 그 데이터를 문자열형으로 분류했다. 데이터를 이용해 어떤 사실에 대한 참/거짓을 이야기할 수 있다면 그 데이터는 논리형으로 구분했다.  
컴퓨터 안에 살아가는 데이터를 목적에 따라 분류하기 시작히면서 **타입 시스템(type system)**이 자라나기 시작했다. 타입 시스템의 목적은 메모리 안의 모든 데이터가 비트열로 보임으로써 야기되는 혼란을 방지하는 것이다. 타입 시스템은 메모리 안에 저장된 0과 1에 대해 수행 가능한 작업과 불가능한 작업을 구분함으로써 데이터가 잘못 사용되는 것을 방지한다. => 데이터가 잘못 사용되지 않도록 제약사항을 부과하는 것이다.  
지금까지의 내용을 통해 타입에 관련된 두 가지 중요한 사실을 알 수 있다.  
첫째, 타입은 데이터가 어떻게 사용되느냐에 관한 것이다. 따라서 데이터가 어떤 타입에 속하는지를 결정하는 것은 데이터에 적용할 수 있는 작업이다. 일반적으로 데이터를 이용해 수행할 수 있는 작업을 연산자(operator)라고 한다. 어떤 데이터에 어떤 연산자를 적용할 수 있느냐가 그 데이터의 타입을 결정한다.  
둘째, 타입에 속한 데이터를 메모리에 어떻게 표현하는지는 외부로부터 철저하게 감춰진다. 데이터 타입의 표현은 연산 작업을 수행하기에 가장 효과적인 형태가 선택되며, 개발자는 해당 데이터의 타입의 표현 방식을 몰라도 뎅터를 사용하는 데 지장이 없다.

> 데이터 타입이란?  
> 메모리 안에 저장된 데이터의 종류를 분류하는 데 사용하는 메모리 집합에 관한 메타데이터이다. 데이터에 대한 분류는 암시적으로 어떤 종류의 연산이 해당 데이터에 대해 수행될 수 있는지를 결정한다.

---

### 7/5(화)

객체지향의 사실과 오해 - 3. 타입과 추상화  
타입

[객체와 타입]  
객체지향 프로그램을 작성할 때 우리는 객체를 일종의 데이터처럼 사용한다. 따라서 객체를 타입에 따라 분류하고 그 타입에 이름을 붙이는 것은 결국 프로그램에서 사용할 새로운 데이터 타입을 선언하는 것과 같다. 애플리케이션 내부에 살고 있는 모든 객체의 상태를 모으면 결국 애플리케이션에서 관리해야 하는 전체 데이터를 표현할 수 있게 된다.  
객체는 데이터가 아니고, 객체에서 중요한 것은 객체의 행동이다. 상태는 행동의 결과로 초래된 부수효과를 쉽게 표현하기 위해 도입한 추상적인 개념일 뿐이다. 객체를 창조할 때 가장 중요하게 고려해야 하는 것은 **객체가 이웃하는 객체와 협력하기 위해 어떤 행동을 해야 할지를 결정하는 것**이다. 즉 객체가 협을 위해 어떤 책임 지녀야 하는지를 결정하는 것이 객체지향 설계의 핵심이다.  
객체의 타입의 두 가지 조건

-   첫째, 어떤 객체가 어떤 타입에 속하는 지를 결정하는 것은 객체가 수행하는 동작이다.  
    어떤 객체들이 동일한 행동을 수행할 수 있다면 그 객체들은 동일한 타입으로 분류될 수 있다.
-   둘쨰, 객체의 내부적인 표현은 외부로부터 철저하게 감춰진다.  
    객체의 행동을 가장 효과적으로 수행할 수만 있다면 객체 내부의 상태를 어던 방식으로 표현하더라도 무방하다.

[행동이 우선이다]  
동일한 책임을 수행하는 일련의 객체는 동일한 타입에 속한다고 말할 수 있다. 이것은 객체를 타입으로 분류할 때 사용해야 하는 기준을 명확하게 제시한다. 어떤 객체를 다른 객체와 동일한 타입으로 분류하는 기준은 그 객체가 타입에 속한 다른 객체와 동일한 행동을 하기만 하면 된다. 그 객체가 다른 객체와 동일한 데이터를 가지고 있더라도 다른 행동을 한다면 그 객체들은 서로 다른 타입으로 분류되애 한다.  
타입이 데이터가 아니라 행동에 의해 결정된다는 사실은 객체지향 패러다임을 특징 짓는 중요한 몇 가지 원리와 원칙에 의미를 부여한다. 같은 타입에 속한 객체는 행동만 동일하다면 서로 다른 데이터를 가질 수 있다. 여기서 동일한 행동이란 동일한 책임을 의미하며, 동일한 책임이란 동일한 메시지 수신을 의미한다. 따라서 동일한 타입에 속한 객체는 내부의 데이터 표현 방식이 다르더라도 동일한 메시지를 수신하고 이를 처리할 수 있다. 다만 내부의 표현 방식이 다르기 때문에 동일한 메시지를 처리하는 방식은 서로 다를 수밖에 없다. 이는 **다형성**에 의미를 부여한다. 다형성이란 동일한 요청에 대해 서로 다른 방식으로 응답할 수 있는 능력을 뜨한다. 동일한 메시지를 서로 다른 방식으로 처리하기 위해서는 객체들은 동일한 메시지를 수신할 수 있어야 하기 때문에 결과적으로 다형적인 겍체들은 동일한 타입(또는 타입 계층)에 속하게 된다.  
데이터의 내부 표현 방식과 무관하게 행동만이 고려 대상이라는 사실은 외부에 데이터를 감춰야 한다는 것을 의미한다. 따라서 훌륭한 객체지향 설계는 외부에 행동만을 제공하고 데이터는 행동 뒤로 감춰야 한다. 이를 **캡슐화**라고 한다. 공용 인터페이스 뒤로 데이터를 캡슐화하라는 오래된 격언은 객체를 행동에 따라 분류하기 위해 지켜야 하는 기본적인 원칙이다.  
행동에 따라 객체를 분류하기 위해서는 객체가 내부적으로 관리해야 하는 데이터가 아니라 객체가 외부에 제공해야 하는 행동을 먼저 생각해야 한다. 이를 위해서는 객체가 외부에 제공해야 하는 책임을 먼저 결정하고 그 책임을 수행하는 데 적합한 데이터를 나중에 결정한 후, 데이터를 책임을 수행하는 데 필요한 외부 인터페이스 뒤로 캡슐화해야 한다. **책임-주도 설계(Responsibility-Driven Design)**라고 부르는 객체지향 설계 방법은 데이터를 먼저 생각하는 데이터-주도 설계(Data-Driven Design) 방법의 단점을 개선하기 위해 고안됐다.

**객체를 결정하는 것은 행동이다. 데이터는 단지 행동을 따를 뿐이다.** 이것이 객체를 객체답게 만드는 가장 핵심적인 원칙이다.

---

### 7/6(수)

객체지향의 사실과 오해 - 3. 타입과 추상화  
타입의 계층

[트럼프 계층]  
앨리스의 이야기에 등장하는 정원사, 병사, 신하, 왕자와 공주를 '트럼프'라는 타입으로 분류했다. 해당 인물들은 카드 게임에서 사용하는 트럼프와 같다고 생각해서 분류한 것이 아니라 트럼프와 몇 가지 특징을 공유하기 때문에 트럼프라고 불렸던 것이다. 더 정확하게 말하면 앨리스는 등장인물들을 트럼프가 아니라 트럼프 인간으로 봤던 것이다.  
객체가 동일한 타입으로 분류되기 위해서는 공통의 행동을 가져야만 한다. 그러나 위 등장인물들의 외양은 트럼프와 유사하지만 행동 자체는 트럼프와 완벽하게 동일하지 않다.  
앞에서 트럼프 타입의 정의, 즉 내연을 납작 엎드릴 수 있고 뒤집어질 수 있으며 걸을 떄마다 몸이 종이처럼 좌우로 펄럭이는 존재로 정의했다. 일반적으로 트럼프 카드는 납작 엎드릴 수 있고 뒤집어질 수는 있지만 걸어다닐 수는 없다. 따라서 트럼프 타입으로 불렀던 객체들을 좀 더 정확하게 트럼프 인간이라는 타입으로 분류하는 것이 옳다. 트럼프 인간 타입의 객체는 트럼프 타입의 객체가 할 수 있는 모든 행동을 할 수 있을뿐만 아니라 추가적으로 걸어다니는 행동을 더 할 수 있다. => 트럼프 인간은 일반적인 트럼프 카드보다 좀 더 특화된 행동을 하는 트럼프이다.  
외연이라는 객체의 집합의 관점에서 트럼프와 트럼프 인간 타입을 봤을 때 트럼프 인간은 트럼프이다. 따라서 모든 트럼프 인간은 동시에 트럼프인 것이다. 이것은 트럼프 인간 타입에 속한 객체는 트럼프 타입의 객체에도 함께 속해야 한다는 것을 의미한다. 이 관점에서 트럼프는 트럼프 인간을 포괄하는 좀 더 일반적인 개념이다. 트럼프 인간은 트럼프보다 좀 더 특화된 행동을 하는 특수한 개념이다. 이 두 개념 사이의 관계를 **일반화/특수화(generalization/specialization)** 관계라고 한다.

[일반화/특수화 관계]  
타입과 타입 사이에는 일반화/특수화 관계가 존재할 수 있다. 더 일반적이라는 말은 더 포괄적이라는 의미를 내포하기 때문에 트럼프는 트럼프 인간에 속하는 객체를 포함한다.  
일반화와 특수화는 동시에 일어난다. 더 특수하다는 것은 일반적인 개념보다 범위가 더 좁다는 것을 의미하므로 트럼프 인간에 속한 객체는 트럼프에 속하는 객체보다 그 수가 적을 수밖에 없다. 집합의 관점에서는 특수한 개념을 포함하는 트럼프 인간은 좀 더 일반적인 개념을 표현하는 트럼프의 부분 집합이 된다.  
이때 중요한 것은 객체지향에서 일반화/특수화 관계를 결정하는 것은 객체의 상태를 표현하는 데이터가 아니라 행동이라는 것이다. 두 타입 간에 일반화/특수화 관계가 성립하려면 한 타입이 다른 타입보다 더 특수하게 행동해야 하고 반대로 한 타입은 다른 타입보다 더 일반적으로 행동해야 한다. 결국 객체의 일반화/특수화 관계에서도 중요한 것은 객체가 내부에 보관한 데이터가 아니라 객체가 외부에 제공하는 행동이다.  
행동의 관점에서 일반적인 타입이란 특수한 타입이 가진 행동들 중에서 일부 행동만을 가지는 타입을 가리킨다. 특수한 타입이란 일반적인 타입이 가진 모든 행동을 포함하지만 거기에 자신만의 행동을 추가하는 타입을 가리킨다. 따라서 일반적인 타입보다 특수한 타입이 더 많은 수의 행동을 가진다.  
여기서 주의해야 할 점은 타입의 내연을 의미하는 행동의 가짓수와 외연을 의미하는 집합의 크기는 서로 반대라는 사실이다. 일반화/특수화 관계에서 일반적인 타입은 특수한 타입보다 더 적은 수의 행동을 가지지만 더 큰 크기의 외연 집합을 가진다. 특수한 타입은 일반적인 타입보다 더 많은 수의 행동을 가지지만 더 적은 크기의 외연 집합을 가진다.

---

### 7/7(목)

객체지향의 사실과 오해 - 3. 타입과 추상화  
타입의 계층

[슈퍼타입과 서브타입]  
일반화/특수화 관계는 좀 더 일반적인 한 타입과 좀 더 특수한 한 타입 간의 관게다. 이때 좀 더 일반적인 타입을 **슈터타입(Supertype)**이라고 하고 좀 더 특수한 타입을 **서브타입(Subtype)**이라고 한다.  
슈퍼타입과 서브타입 두 타입 간의 관계는 행동에 의해 결정된다. 즉 어떤 타입이 다른 타입의 서브 타입이 되기 위해서는 행위적 호환성을 만족시켜야 한다. 일반적으로 서브 타입은 슈퍼타입의 행위에 호환되기 때문에 서브타입은 슈퍼타입을 대체할 수 있어야 한다. 따라서 어떤 타입을 다른 타입의 서브타입이라고 말할 수 있으려면 다른 타입을 대체할 수 있어야 한다.  
일반화/특수화 관계를 표기할 때는 일반적인 타입인 슈퍼타입을 상단에 좀 더 특수한 타입인 서브타입을 하단에 위치시키고 속이 빈 삼각형으로 연결해서 표현한다. 서브타입에서는 슈퍼타입과 중복된 행위를 생략할 수 있다.

[일반화는 추상화를 위한 도구다]  
추상화의 두 번째 차원은 중요한 부분을 강조하기 위해 불필요한 세부 사항을 제거시켜 단순하게 만드는 것이다. 앨리스의 이야기에서 정원에 있는 등장인물을 트럼프 인간으로 추상화했다. 그러나 가끔씩은 트럼프 인간이 아니라 더 단순화된 트럼프로 보는 것이 상황을 더 단순하게 만드는 경우가 있다. 이때 앨리스는 트럼프 인간의 특수한 능력은 제거하고 트럼프의 특성에 집중한 것이다. 따라서 앨리스는 그 시점에 중요한 사항인 트럼프의 특성에만 집중하고 불필요한 트럼프 인간의 특성은 제거해 상황을 단순하게 만든 것이다.  
여기서 두 가지 추상화 기법이 사용되었다. 하나는 정원에 있던 등장인물들의 차이점을 배제하고 공통점만을 강조함으로써 이들을 공통의 타입인 트럼프 인간으로 분류한 것이고, 다른 하나는 트럼프 인간을 좀 더 단순한 관점에서 바라보기 위해 불필요한 특성을 배제하고 좀 더 포괄적인 의미를 가진 트럼프로 일반화했다는 것이다.  
이처럼 객체지향 패러다임을 통해 세상을 바라보는 거의 대부분의 경우에 분류와 일반화/특수화 기법을 동시에 적용하게 된다.

---

### 7/8(금)

객체지향의 사실과 오해 - 3. 타입과 추상화  
정적 모델

[타입의 목적]  
타입을 사용하는 이유는 인간의 인지 능력으로는 시간에 따라 동적으로 변하는 객체의 복잡성을 극복하기 너무 어렵기 때문이다.  
앨리스의 키는 앨리스가 어떤 행동을 할 때마다 시시각각 변한다. 그러나 앨리스라고 하는 객체의 상태는 변하지만 앨리스를 다른 객체와 구별할 수 있는 식별성은 동일하게 유지된다. 따라서 우리는 머싯속에 앨리스가 가질 수 있는 모든 경우의 키 값을 나열하는 대신 앨리스의 키가 임의의 값을 가질 수 있다는 사실만을 생각함으로써 상황을 단순하게 만들 수 있다.  
타입은 시간에 따라 동적으로 변하는 앨리스의 상태를 시간과 무관한 정적인 모습으로 다룰 수 있게 해준다. 결국 타입은 앨리스의 상태에 복잡성을 부과하는 시간이라는 요소를 제거함으로써 시간에 독립적인 정적인 모습으로 앨리스를 생각할 수 있게 해준다.

[그래서 결국 타입은 추상화다]  
추상화를 사용하면 어떤 시점에 앨리스에 관해 생각할 때 불필요한 시간이라는 요소와 상태 변화라는 요소를 제거하고 철저하게 정적인 관점에서 앨리스의 모습을 묘사하는 것을 가능하게 해준다.  
타입을 이용하면 객체의 동적인 특성을 추상화할 수 있다. 결국 타입은 시간에 따른 객체의 상태 변경이라는 복잡성을 단순화할 수 있는 효과적인 방법인 것이다.

[동적 모델과 정적 모델]  
객체에는 두 가지 모델을 동시에 고려한다.  
하나는 객체가 특정 시점에 구체적으로 어떤 상태를 가지느냐다. 이를 객체의 **스냅샷(snapshot)**이라고 한다. 객체지향 모델링을 위한 표준 언어인 UML에서 스냅샷은 **객체 다이어그램(object diagram)**이라고도 불린다. 스냅샷처럼 실제로 객체가 살아 움직이는 동안 상태가 어떻게 변하고 어떻게 행동하는지를 포착하는 것은 **동적 모델(dynamic model)**이라고 한다.  
다른 하나는 객체가 가질 수 있는 모든 상태와 모든 행동을 시간에 독립적으로 표현하는 것이다. 일반적으로 이런 모델을 **타입 모델(type diagram)**이라고 한다. 이 모델은 동적으로 변하는 객체의 상태가 아니라 객체가 속한 타입의 정적인 모습을 표현하기 때문에 **정적 모델(static model)**이라고도 한다.  
객체지향 프로그래밍 언어를 이용해 클래스를 작성하는 시점에는 시스템을 정적인 관점에서 접근하는 것이다. 그러나 실제로 애플리케이션을 실행해 객체의 상태 변경을 추적하고 디버깅하는 동안에는 객체의 동적인 모델을 탐험하고 있는 것이다.

[클래스]  
객체지향 프로그래밍 언어에서 정적인 모델은 클래스를 이용해 구현된다. 따라서 **타입을 구현**하는 가장 보편적인 방법은 클래스를 이용하는 것이다. 클래스와 타입은 동일한 것이 아니다. 타입은 객체를 분류하기 위해 사용하는 개념이고, 클래스는 단지 타입을 구현할 수 있는 여러 구현 메커니즘 중 하나이다. 자바스크립트와 같은 프로토타입 기반의 언어에는 클래스가 존재하지 않는다.  
그럼에도 대부분의 객체지향 프로그래밍 언어는 클래스를 기반으로 하기 때문에 많은 사람들은 클래스와 타입을 동일한 개념이라고 생각한다. 클래스와 타입을 구분하는 것은 설계를 유연하게 유지하기 위한 바탕이 된다. 클래스는 타입의 구현 외에도 코드를 재사용하는 용도로도 사용되기 때문에 클래스와 타입을 동일시하는 것은 수많은 오해와 혼란을 불러일으키곤 한다.  
객체를 분류하는 기준은 타입이며, 타입을 나누는 기준은 객체가 수행하는 행동이다. 그리고 객체를 분류하기 위해 타입을 결정한 후 프로그램 언어를 이용해 타입을 구현할 수 있는 한 가지 방법으로 클래스가 있다.  
객체지향에서 중요한 것은 동적으로 변하는 객체의 **상태**와 상태를 변경하는 **행위**다.
